%                                                                       00000100
%                                                                       00000200
%           NOTES ON B5700 ALGOL TO FORTRAN TRANSLATOR                  00000300
%                                                                       00000400
%                                                                       00000500
% 1.PURPOSE OF NOTES:                                                   00000600
%                                                                       00000700
%      THE TRANSLATOR IS WRITTEN IN GTL(GEORGIA TECH LANGUAGE)AND RELIES00000800
% HEAVILY ON MANY ADVANCED FEATURES CONTAINED IN THE LANGUAGE, SUCH AS  00000900
% STRING PROCESSING, LIST PROCESSING, PLEX PROCESSING, RECORD PROCESSING00001000
% ADVANCED I/O STRUCTURE, ETC. THESE NOTES ARE NOT INTENDED AS          00001100
% DOCUMENTATION FOR THE PROGRAM ITSELF BUT AS AIDS FOR THE USER. THE    00001200
% PROGRAM IS CONSIDERED AN AID FOR TRANSLATION OF B5700 ALGOL TO        00001300
% FORTRAN, NOT A COMPLETE LANGUAGE TRANSLATION. THUS, IN MANY           00001400
% APPLICATIONS IT IS NECESSARY TO EXTEND OR MODIFY THE TRANSLATOR       00001500
% ITSELF; THE PROGRAMMER WILL HAVE TO RELY UPON SUCH AIDS AS THE SOURCE 00001600
% LISTING (ALTRAN/IMAGE), GTL MANUAL, AND CROSS REFERENCE LISTINGS,     00001700
%                                                                       00001800
%                                                                       00001900
% 2. RESTRICTIONS AND MODIFICATION OF ALGOL SOURCE LANGUAGE INPUT TO    00002000
% TRANSLATOR:                                                           00002100
%                                                                       00002200
%       A. THE TRANSLATOR REQUIRES THE PROGRAMMER TO MODIFY THE INPUT   00002300
% SOURCE LANGUAGE IN AT LEAST THE FOLLOWING AREAS:                      00002400
%                                                                       00002500
%           THE INPUT TO THE TRANSLATOR MUST BE A COMPLETE,             00002600
% SYNTACTICALLY CORRECT, ALGOL PROGRAM, EXCEPT THAT, IN THE             00002700
% SPECIFICATION OF ARRAYS IN PROCEDURE HEADS, THE UPPER AND LOWER BOUNDS00002800
% SHOULD BE GIVEN, JUST AS IF THE ARRAYS WERE BEING DECLARED; IN ANY    00002900
% CASE, ARRAY BOUNDS MUST BE MADE LITERALS. THE MOST EFFICIENT LOWER    00003000
% BOUND IS 1, NOT 0, FOR THE FORTRAN OUTPUT.                            00003100
%                                                                       00003200
%           ALL FORMATS SHOULD BE DESIGNATED AS IN OR OUT. CARRIAGE     00003300
% CONTROL IS ADDED FOR THOSE FORMATS DECLARED OUT.                      00003400
%                                                                       00003500
%           ALL FILES SHOULD BE DESIGNATED IN OR OUT AND UNIT NUMBERS   00003600
% OR FILE TYPES SHOULD BE GIVEN WHERE APPROPRIATE.                      00003700
%                                                                       00003800
%           FILL STATEMENTS SHOULD BE CHECKED FOR PROPER NUMBER OF      00003900
% ELEMENTS; TOO MANY ELEMENTS MAY BE TROUBLESOME.                       00004000
%                                                                       00004100
%           ASSIGNMENTS WITHIN EXPRESSIONS SHOULD BE REPLACED BY        00004200
% EQUIVALENT CODE IF NECESSARY. AN EXAMPLE WOULD BE                     00004300
%                A[I]:=(I:=I+1)                                         00004400
% WHICH WOULD BE INCORRECTLY TRANSLATED TO                              00004500
%                I=I+1                                                  00004600
%                A(I)=I                                                 00004700
%                                                                       00004800
%           ALL CALLS ON CAST LIBRARIES MUST BE REPLACED BY THE         00004900
% EQUIVALENT SOURCE LANGUAGE; MAKCAST MAY BE USED IF NECESSARY TO PUNCH 00005000
% THE CODE ON CARDS.                                                    00005100
%                                                                       00005200
%           OWN DECLARATIONS SHOULD BE MADE GLOBAL, THE VARIABLE NAMES  00005300
% CHANGED, AND THE ORIGINAL DECLARATION REPLACED WITH DEFINE            00005400
% DECLARATION GIVING PROPER NAMES OF VARIABLES, IF NECESSARY.           00005500
%                                                                       00005600
%      B. THE TRANSLATOR ACCEPTS ONLY A SUBJECT OF ALGOL. FOLLOWING IS  00005700
% A LIST OF MAJOR LANGUAGE RESTRICTIONS.                                00005800
%                                                                       00005900
%           NO IDENTIFIERS, NUMBERS, OR MULTI-SPECIAL-CHARACTER SYMBOLS 00006000
% MAY BE BROKEN ACROSS CARD IMAGES. QUOTED STRINGS MAY BE BROKEN ACROSS 00006100
% CARD IMAGES.                                                          00006200
%                                                                       00006300
%           NO STREAM PROCEDURES OR POINTER VARIABLES ARE HANDLED.      00006400
%                                                                       00006500
%           NO SWITCH FORMATS, LISTS, OR FILES ARE ALLOWED.             00006600
%                                                                       00006700
%           NO PARAMETRIC DEFINES ARE ALLOWED.                          00006800
%           NO EDIT-AND-MOVE STATEMENTS ARE ALLOWED, UNLESS U1108       00006900
% OPTION IS SET.                                                        00007000
%                                                                       00007100
%           NO RANDOM-ACCESS I/O STATEMENTS ARE HANDLED.                00007200
%                                                                       00007300
%           NO RUN-TIME-ERROR RECOVERY DECLARATIONS OR STATEMENTS MAY   00007400
% BE ENTERED.                                                           00007500
%                                                                       00007600
%           NO BREAK, WHEN, WAIT, UNTIL, DELAY, SORT, MERGE, RELEASE    00007700
% STATEMENTS ARE ALLOWED.                                               00007800
%                                                                       00007900
%           THE ONLY CARRIAGE CONTROL PARTS ALLOWED IN WRITE STATEMENTS 00008000
% ARE PAGE AND *. NO NONEMPTY BUFFER RELEASE PART IN READ STATEMENTS    00008100
% IS ALLOWED.                                                           00008200
%                                                                       00008300
%           READ REVERSE AND READ SEEK ARE NOT ALLOWED.                 00008400
%                                                                       00008500
%           ONLY ONE OR TWO DIMENSIONS ARE ALLOWED IN ARRAY             00008600
% DECLARATIONS.                                                         00008700
%                                                                       00008800
%           ONLY THOSE FORMAT EDITING PHRASES ALLOWED IN FORTRAN ARE    00008900
% ALLOWED IN THE ALGOL SOURCE LANGUAGE.                                 00009000
%                                                                       00009100
%           A MAXIMUM OF 6 CHARACTERS FOR U1108 AND B5700, 4 CHARACTERS 00009200
% FOR CDC AND S360 ARE ALLOWED IN QUOTED STRINGS OUTSIDE OF FORMAT      00009300
% STATEMENTS. ALL QUOTED STRINGS OUTSIDE OF FORMAT STATEMENTS ARE LEFT- 00009400
% JUSTIFIED IN THE PROPER FIELD WIDTH.                                  00009500
%                                                                       00009600
%           NO DYNAMIC ARRAY BOUNDS ARE ALLOWED.                        00009700
%                                                                       00009800
%           ONLY SIMPLE FOR (STEP-UNTIL AND STEP-WHILE) STATEMENTS WITH 00009900
% SIMPLE INTEGER INCREMENTS AND LIMITS ARE PROCESSED.                   00010000
%                                                                       00010100
%           OWN AND SAVE DECLARATORS ARE USUALLY IGNORED.               00010200
%                                                                       00010300
%           ONLY SIMPLE VARIABLES AND ARRAYS MAY BE PASSED TO           00010400
% PROCEDURES.                                                           00010500
%                                                                       00010600
%           THE SIGN FUNCTION IS ACCEPTED ONLY IN THE FORM SIGN (AEXP)  00010700
% | PRIMARY, BECAUSE OF RESTRICTIONS ON FORTRAN SIGN INTRINSIC.         00010800
%                                                                       00010900
%           NO INNER BLOCKS ARE ALLOWED, THOUGH PROCEDURES MAY HAVE     00011000
% DECLARATIONS.                                                         00011100
%                                                                       00011200
%                                                                       00011300
% 3. OPTIONS TO THE TRANSLATOR ARE GIVEN ON "$" CARDS. ONCE SET, AN     00011400
% OPTION IS NORMALLY NOT RESET, EXCEPT FOR CARD, TAPE, LIST, NEW. THE   00011500
% OPTIONS ARE THE FOLLOWING:                                            00011600
%                                                                       00011700
%           CARD - INPUT IS FROM READER ONLY.                           00011800
%                                                                       00011900
%           TAPE - INPUT IS FROM TAPE, WITH MERGING FROM READER.        00012000
%                                                                       00012100
%           PUNCH - FORTRAN OUTPUT IS TO BE PUNCHED IN 026 CHARACTERS.  00012200
%                                                                       00012300
%           NAME XXXXXX - THE IDENTIFICATION XXXXXX IS GIVEN TO THE     00012400
% FORTRAN OUTPUT.                                                       00012500
%                                                                       00012600
%           COMMON XXXXXX - THE IDENTIFICATION XXXXXX IS GIVEN TO THE   00012700
% COMMON BLOCK USED FOR GLOBAL VARIABLES.                               00012800
%                                                                       00012900
%           LIST - INPUT CARDS ARE TO BE LISTED.                        00013000
%                                                                       00013100
%           FRTP - FORTRAN OUTPUT IS TO BE PLACED ON UNLABELED, EVEN-   00013200
% PARITY, 84-CHARACTER BLOCK-LENGTH TAPE.                               00013300
%                                                                       00013400
%           NEW - INPUT IMAGES ARE TO BE PLACED ON CARD IMAGE TAPE.     00013500
%                                                                       00013600
%           SEQ - INPUT IMAGES ARE TO BE RESEQUENCED, STARTING AT 100,  00013700
% IN STEPS OF 100.                                                      00013800
%                                                                       00013900
%           NODO - DO LOOPS ARE NOT TO BE PRODUCED IN THE FORTRAN;      00014000
% INSTEAD, THE EQUIVALENT INDEX SETTING AND TESTING IS TO BE USED.      00014100
% EXCEPT IN VERY SIMPLE PROGRAMS, THIS OPTION SHOULD BE USED TO PREVENT 00014200
% DIFFICULTY WITH DO-LOOPS.                                             00014300
%                                                                       00014400
%           CCCC - U1108 CONTROL CARDS ARE PRODUCED TO COMPILE THE      00014500
% RESULTING FORTRAN OUTPUT, SUBROUTINE-BY-SUBROUTINE.                   00014600
%                                                                       00014700
%           B5700-MAX INTEGER = 2*39-1; MAX STRING LENGTH = 6           00014800
% CHARACTERS; FREE-FIELD I/O USING / INSTEDAD OF FORMAT NAME.           00014900
%                                                                       00015000
%           U1108-MAX INTEGER = 2*35-1; MAX STRING LENGTH = 6           00015100
% CHARACTERS; FREE-FIELD I/O USING NULL FORMAT STRING; EDIT-AND-MOVE    00015200
% ALLOWED.                                                              00015300
%                                                                       00015400
%           S360-MAX INTEGER = 2*31-1; MAX STRING LENGTH = 4            00015500
% CHARACTERS; NO FREE-FIELD I/O.                                        00015600
%                                                                       00015700
%           CDC-MAX INTEGER = 2*23-1; MAX STRING LENGTH = 4 CHARACTERS; 00015800
% NO FREE-FIELD I/O.                                                    00015900
%                                                                       00016000
%      THE DEFAULT OPTIONS MAY BE GIVEN AS FOLLOWS:                     00016100
%           $CARD LIST NAME MAINXX COMMON COMBLK                        00016200
% MAX STRING LENGTH = 6 CHARACTERS; MAX INTEGER = 2*35-1; NO FREE-FIELD 00016300
% I/O.                                                                  00016400
%                                                                       00016500
%                                                                       00016600
% 4. LIST OF ERROR AND WARNING MESSAGES:                                00016700
%                                                                       00016800
%           0    SYNTACTIC ENTITY EXPECTED BUT NOT FOUND                00016900
%           1    VARIABLE CALLED BY VALUE IN ALGOL IS CALLED BY         00017000
%                REFERENCE IN FORTRAN                                   00017100
%           2    MISSING LEFT BRACKET                                   00017200
%           3    ILLEGAL ARRAY ROW DESIGNATOR                           00017300
%           4    ILLEGAL STATEMENT BEGINNER                             00017400
%           6    ILLEGAL CONTROL VARIABLE IN FOR LIST ELEMENT           00017500
%           7    ILLEGAL ARRAY ROW DESIGNATOR                           00017600
%           8    WRONG NUMBER OF DIMENSIONS IN ARRAY                    00017700
%           9    ARITHMETIC EXPRESSION EXPECTED                         00017800
%           10   BOOLEAN EXPRESSION EXPECTED                            00017900
%           11   SYNTACTIC ENTITY OUT OF PLACE                          00018000
%           14   ILLEGAL ELEMENT OF EXPRESSION                          00018100
%           15   ILLEGAL VARIABLE DECLARATOR TYPE                       00018200
%           16   SWITCH IDENTIFIER EXPECTED                             00018300
%           20   ARRAY ROW EXPECTED                                     00018400
%           21   MISSING WITH IN FILL STATEMENT                         00018500
%           22   ILLEGAL ELEMENT IN FILL STATEMENT                      00018600
%           25   MISSING END                                            00018700
%           26   ENTITY MAY NOT BE PASSED TO A PROCEDURE                00018800
%           27   MISSING "=" IN DEFINE OR "(" IN LIST DECLARATION       00018900
%           28   ILLEGAL ELEMENT IN DECLARATION LIST                    00019000
%           29   LABEL MAY NOT BE PASSED TO A PROCEDURE                 00019100
%           30   MISSING "(" IN FORMAT DECLARATION                      00019200
%           31   TOO MANY DIMENSIONS IN ARRAY BOUNDS                    00019300
%           32   ELEMENTS IN VALUE PART NOT FORMAL PARAMETERS           00019400
%           33   ILLEGAL PARAMETER FOR OR TYPE OF A PROCEDURE           00019500
%           35   MISSING PARAMETER SPECIFICATION                        00019600
%           37   ILLEGAL CONTROL VARIABLE IN FOR STATEMENT              00019700
%           38   ULLEGAL ENDING OF FOR STATEMENT CONTROL                00019800
%           40   OWN USED ILLEGALLY                                     00019900
%           41   SAVE USED ILLEGALLY                                    00020000
%           42   IN USED ILLEGALLY                                      00020100
%           43   OUT USED ILLEGALLY                                     00020200
%           45   MISSING SEMICOLON AFTER DECLARATION                    00020300
%           50   ILLEGAL DECLARATORS                                    00020400
%           51   QUOTED STRING TOO LONG                                 00020500
%           52   ILLEGAL ARRAY SPECIFICATION OR DECLARATION             00020600
%           56   MISSING ASSIGNMENT IN FOR STATEMENT                    00020700
%           70   WRONG NUMBER OF PARAMETERS TO PROCEDURE                00020800
%           90   ILLEGAL DECLARATOR                                     00020900
%           99   MISSING SEMICOLON OR END AFTER STATEMENT               00021000
%           100  UNDECLARED IDENTIFIER                                  00021100
%                                                                       00021200
%                                                                       00021300
% 5. THE NAMES OF THE FILES USED BY THIS PROGRAM ARE THE FOLLOWING:     00021400
%                                                                       00021500
%             FILE TYPE                    INTERNAL  EXTERNAL           00021600
%                                            NAME      NAME             00021700
%                                                                       00021800
%           CARD INPUT                    INFILE    INFILE              00021900
%           TAPE INPUT                    TAPE      TAPE                00022000
%           TAPE OUTPUT (ALGOL)           NEWTAPE   NEWTAPE             00022100
%           TAPE OUTPUT (FORTRAN)         FORTAPE   (UNLABELLED)        00022200
%           PRINTER OUTPUT                OUTFILE   OUTFILE             00022300
%           PUNCH OUTPUT                  PUNCH     PUNCHH              00022400
%                                                                       00022500
%           FOR REMOTE INPUT, CARD INPUT/PUNCH OUTPUT ARE AUTOMATICALLY 00022600
% CHANGED TO DISK INPUT (INFILE) / DISK OUTPUT (PUNCHH).                00022700
%                                                                       00022800
%                                                                       00022900
%                                                                       00023000
%                                                                       00023100
%  BASIC GLOBAL DECLARATIONS                                            01000000
BEGIN SYMBOL PLEX;                                                      01001000
REAL ESPDISK; %                                                         01001500
FILE IN INFILE (2,10,300); %                                            01002000
FILE IN TAPE (2,56,10);                                                 01003000
      SAVE FILE OUT NEWTAPE (2,56,10, SAVE 90);                       %P01003100
       SAVE ALPHA FILE OUT FORTAPE 9 (2,12,SAVE 90);                  %P01003200
FILE OUT OUTFILE 16(2,15);                                              01004000
FILE OUT PUNCH DISK UPDATE [20:600]  "PUNCHH" (2,10,300,SAVE 100); %    01005000
DEFINE PNCH = PUNCH#; %                                                 01005500
FILE OUT REMOTE REMOTE (2,15); %                                        01005900
RECORD FILE DISC DISK LOCAL [20:900](1,15,30);                          01006000
RECORD RC DISC (FORCARD, STMTF,DECLF,NEXTSUBR,BLOCKF,NEXT);             01007000
STRING FIELD FORCARD[0:80];                                             01008000
REAL FIELD BLOCKF (13);                                                 01009000
RC FIELD STMTF(10),                                                     01010000
      DECLF(11),                                                        01011000
      NEXTSUBR(12),                                                     01012000
      NEXT(14);                                                         01013000
DEFINE FILETYPE = CDRF#;                                                01014000
DEFINE LABELNO = CDRF#;                                                 01015000
REAL FIELD WH(0),                                                       01016000
      CDRF(0)[33:15],                                                   01017000
      ALFOR(1),                                                         01018000
      FORTF[3:8];                                                       01019000
RC FIELD RCF [33:15];                                                   01020000
REAL FIELD  BLKF [11:7], CLASSF [26:7];                                 01021000
STRING FIELD STRF [0:8];                                                01022000
REAL  CLASS,                                                            01023000
      WHC,                                                              01024000
        ROWSIZE,FILENO,                                                 01025000
      STN,                                                              01026000
      LMAX,                                                           %P01026500
      BLNKFRMT,FREEFRMT, %                                            %U01026800
      NDX,ROWV,C,DATANDX,RCX,RSIZE,PAGEFRMT,                            01027000
      II,YY,J,LBN,ERRORCOUNT,                                           01028000
      BLOCK,NEWBLOCK, CON, DFX,                                         01029000
      TRUTH,FALSIE, %                                                 %U01029500
      ONE, ZERO;                                                        01030000
ALPHA PROGNAME,COMNAME; %                                               01031000
BOOLEAN  ERRFLAG, ROWTOG,ENDTOG,ROW,FST,RSIZETOG,IMOD,PARAM,            01032000
        LISTOG,SPECTOG,                                                 01033000
      NEWTAPETOG,                                                     %P01033100
       WHL,SEQTOG,WARNTOG,                                            %P01033200
       FORTOG,                                                        %P01033300
      U1108,B5500, %                                                  %U01033700
      S360, FREE, IOTOG, %                                              01033800
      PREFI,PREFX,CONTIN,COMM,FORMTOG,                                  01034000
      ALLOWDOSTMT,                                                    %U01034500
      STRTOG,TAPETOG,PUNCHTOG,                                          01035000
      JCLTOG, %                                                       %U01035500
      CARDLAST,EOFTOG,STOPDEFINE;                                       01036000
BOOLEAN NOEVAL;                                                         01037000
SYMBOL SYM,INFO,PLIST,NEWSYM,INF,G;                                     01038000
      INTEGER ARRAY UNITC [0:50]; %                                   %U01038500
ARRAY TBL[0:512], %                                                     01039000
      GTA[0:9],                                                         01040000
      DFR[0:9];                                                         01041000
STRING STR(32,TCR(8),NEWSEQ(8)),                                      %P01042000
      LINE(120),                                                        01043000
      LIN2(128), %                                                      01043100
      TCARD(80),                                                        01044000
      CRD(80),                                                          01045000
      CARD(2048), ALGOLSEQ(8), %                                        01046000
      CARDIN(72,CARDSEQ(8)),                                          %P01047000
      TAPEIN(72,TAPESEQ(8));                                          %P01048000
RC ARRAY RCA[0:1,0:8];                                                  01049000
%   INFO WORD FORMAT                                                    01050000
      %  26:7  CLASS                                                    01051000
      %  25:1  FORMAL                                                   01052000
      %  24:1  VALUE                                                    01053000
      %11:7  BLOCK NO                                                   01054000
      %  3:8  FORTRAN INDICATOR                                         01055000
      %  2:1  FORWARD FLAG                                              01055500
      %  1:1  COMMON MARK                                               01056000
%  RCX VALUES                                                           01057000
      %  0  STMT                                                        01058000
      %  1  C  DECL                                                     01059000
      %  2  SUBR                                                        01060000
      %  3  FORMATS                                                     01061000
      %  4  COMMON LIST                                                 01062000
      %  5  DATA LIST                                                   01063000
%                                                                       01064000
INTEGER BEGINEND,IMAX; %                                                01065000
%                                                                       01066000
DEFINE                                                                  01067000
      UNKNOWNID    =   00#,                                             01068000
      DEFINEDID    =   01#,                                             01069000
      FORM         =   02#,                                             01070000
      FORTRANID    =   03#,                                             01071000
      FRMT         =   04#,                                             01072000
      SWFRMT       =   05#,                                             01073000
      FILEID       =   06#,                                             01074000
      SWITCHID     =   07#,                                             01075000
      LABELID      =   08#,                                             01076000
      PROCID       =   09#,                                             01077000
      BOOPROCID    =   10#,                                             01078000
      REALPROCID   =   11#,                                             01079000
      INTPROCID    =   12#,                                             01080000
      BOOID        =   13#,                                             01081000
      REALID       =   14#,                                             01082000
      INTID        =   15#,                                             01083000
      BOOARRAYID   =   16#,                                             01084000
      REALARRAYID  =   17#,                                             01085000
      INTARRAYID   =   18#,                                             01086000
      IDMAX        =   18#,                                             01087000
      FCONSTANT    =   20#,                                             01088000
      QUOTESIGN    =   19#,                                             01089000
      RCONSTANT    =   21#,                                             01090000
      LPAREN       =   22#,                                             01091000
      TRUEV        =   23#,                                             01092000
      FALSEV       =   24#,                                             01093000
      BOOV         =   25#,                                             01094000
      REALV        =   26#,                                             01095000
      INTV         =   27#,                                             01096000
      ALFA         =   28#,                                             01097000
      OWNV         =   29#,                                             01098000
      SAVEV        =   30#,                                             01099000
      LABELV       =   31#,                                             01100000
      LISTV        =   32#,                                             01101000
      OUTV         =   33#,                                             01102000
      INV          =   34#,                                             01103000
      SWITCHV      =   35#,                                             01104000
      PROCV        =   36#,                                             01105000
      ARRAYV       =   37#,                                             01106000
      FORMATV      =   38#,                                             01107000
      FILEV        =   39#,                                             01108000
      DEFINEV      =   40#,                                             01109000
      READV        =   41#,                                             01110000
      WRITEV       =   42#,                                             01111000
      REWINDV      =   43#,                                             01112000
      CLOSEV       =   44#,                                             01113000
      FORV         =   45#,                                             01114000
      WHILEV       =   46#,                                             01115000
      DOV          =   47#,                                             01116000
      FILLV        =   48#,                                             01117000
      UNTILV       =   49#,                                             01118000
      ENDV         =   50#,                                             01119000
      ELSEV        =   51#,                                             01120000
      SEMICOLON    =   52#,                                             01121000
      IFV          =   53#,                                             01122000
      GOV          =   54#,                                             01123000
      BEGINV       =   55#,                                             01124000
      MINUSV       =   56#,                                             01125000
      PLUSV        =   57#,                                             01126000
      TIMESV       =   58#,                                             01127000
      SLASH        =   59#,                                             01128000
      DIVI         =   60#,                                             01129000
      MODV         =   61#,                                             01130000
      STARV        =   62#,                                             01131000
      NOTV         =   63#,                                             01132000
      ORV          =   64#,                                             01133000
      ANDV         =   65#,                                             01134000
      LSSV         =   66#,                                             01135000
      GTRV         =   67#,                                             01136000
      GEQV         =   68#,                                             01137000
      LEQV         =   69#,                                             01138000
      EQVI         =   70#,                                             01139000
      NEQV         =   71#,                                             01140000
      ASSIGNOP     =   72#,                                             01141000
      MISCV        =   73#,                                             01142000
      ABSV         =   74#,                                             01143000
      COSV         =   75#,                                             01144000
      TIMEV        =   76#,                                             01145000
      EXPV         =   77#,                                             01146000
      ARCTANV      =   78#,                                             01147000
      SQRTV        =   79#,                                             01148000
      SIGNV        =   80#,                                             01149000
      ENTIERV      =   81#,                                             01150000
      COMMENTV     =   82#,                                             01151000
      COLON        =   83#,                                             01152000
      PERCENT      =   84#,                                             01153000
      DOLLAR       =   85#;                                             01154000
SYMBOL DEFINE                                                           01155000
      *"BOOL     ":10,                                                  01155100
      *"REALFN   ":11,                                                  01155200
      *"MARTIN   ":15,                                                  01155300
      *"EQUIV    ":11,                                                  01155400
      *"COMPL    ":11,                                                  01155500
      *"CONCAT   ":11,                                                  01155600
      *"IFIX     ":12,                                                  01155700
      *"FLOAT    ":11,                                                  01155800
      *""        ": 19,                                               %A01156000
      *"TRUE     ": 23,                                               %A01157000
      *"(        ": 22,                                               %A01158000
      *"FALSE    ": 24,                                               %A01159000
      *"BOOLEAN  ": 25,                                               %A01160000
      *"REAL     ": 26,                                               %A01161000
      *"INTEGER  ": 27,                                               %A01162000
      *"ALPHA    ": 28,                                               %A01163000
      *"OWN      ": 29,                                               %A01164000
      *"SAVE     ": 30,                                               %A01165000
      *"LABEL    ": 31,                                               %A01166000
      *"LIST     ": 32,                                               %A01167000
      *"OUT      ": 33,                                               %A01168000
      *"IN       ": 34,                                               %A01169000
      *"SWITCH   ": 35,                                               %A01170000
      *"PROCEDURE": 36,                                               %A01171000
      *"ARRAY    ": 37,                                               %A01172000
      *"FORMAT   ": 38,                                               %A01173000
      *"FILE     ": 39,                                               %A01174000
      *"DEFINE   ": 40,                                               %A01175000
      *"READ     ": 41,                                               %A01176000
      *"SPACE    ":41,                                                  01176500
      *"WRITE    ": 42,                                               %A01177000
      *"REWIND   ": 43,                                               %A01178000
      *"CLOSE    ": 44, %                                             %U01179000
      *"LOCK     ": 44, %                                             %U01179500
      *"FOR      ": 45,                                               %A01180000
      *"WHILE    ": 46,                                               %A01181000
      *"DO       ": 47,                                               %A01182000
      *"FILL     ": 48,                                               %A01183000
      *"UNTIL    ": 49,                                               %A01184000
      *"END      ": 50,                                               %A01185000
      *"ELSE     ": 51,                                               %A01186000
      *";        ": 52,                                               %A01187000
      *"IF       ": 53,                                               %A01188000
      *"GO       ": 54,                                               %A01189000
      *"BEGIN    ": 55,                                               %A01190000
      *"-        ": 56,                                               %A01191000
      *"+        ": 57,                                               %A01192000
      *"|        ": 58,                                               %A01193000
      *"TIMES    ":58,                                                  01193500
      *"/        ": 59,                                               %A01194000
      *"DIV      ": 60,                                               %A01195000
      *"MOD      ": 61,                                               %A01196000
      *"*        ": 62,                                               %A01197000
      *"NOT      ": 63,                                               %A01198000
      *"OR       ": 64,                                               %A01199000
      *"AND      ": 65,                                               %A01200000
      *"<        ": 66,                                               %A01201000
      *"LSS      ":66,                                                  01201500
      *"}":67,                                                        %U01202000
      *"GEQ      ":67,                                                  01202500
      *">":68,                                                        %U01203000
      *"GTR      ":68,                                                  01203500
      *"{        ": 69,                                               %A01204000
      *"LEQ      ":69,                                                  01204500
      *"=        ": 70,                                               %A01205000
      *"EQL      ":70,                                                  01205500
      *"!        ": 71,                                               %A01206000
      *"NEQ      ":71,                                                  01206500
      *"~        ": 72,                                               %A01207000
      *"STEP     ": 73,                                               %A01208000
      *"THEN     ": 73,                                               %A01209000
      *"TO       ": 73,                                               %A01210000
      *"VALUE    ": 73,                                               %A01211000
      *"WITH     ": 73,                                               %A01212000
      *",        ": 73,                                               %A01213000
      *"#        ": 73,                                               %A01214000
      *"[        ": 73,                                               %A01215000
      *"]        ": 73,                                               %A01216000
      *".        ": 73,                                               %A01217000
      *")        ": 73,                                               %A01218000
      %                                                               %A01219000
      *"PAGE     ": 73,                                               %A01220000
     %                                                                %A01221000
      *"ABS      ": 74,                                               %A01222000
      *"COS      ": 75,                                               %A01223000
      *"SIN      ": 75,                                               %F01223100
      *"EXP      ": 75,                                               %F01223200
      *"MIN      ": 75,                                               %F01223300
      *"MAX      ": 75,                                               %F01223350
      *"SINH     ": 75,                                               %F01223360
      *"COSH     ": 75,                                               %F01223370
      *"TANH     ": 75,                                               %F01223380
      *"COTAN    ": 75,                                               %F01223400
      *"ARCOS    ": 75,                                               %F01223410
      *"ERF      ": 75,                                               %F01223420
      *"GAMMA    ": 75,                                               %F01223430
      *"TIME     ": 76,                                               %A01224000
      *"LN       ": 77,                                               %F01225000
      *"LOG10    ": 77,                                               %F01225100
      *"LNGAM    ": 77,                                               %F01225200
      *"ARCTAN   ": 78,                                               %A01226000
      *"ARCSIN   ": 78,                                               %F01226200
      *"SQRT     ": 79,                                               %A01227000
      *"SIGN     ": 80,                                               %A01228000
      *"ENTIER   ": 81,                                               %A01229000
      *"COMMENT  ": 82,                                               %A01230000
      *":        ": 83,                                               %A01231000
      *"%        ": 84,                                               %A01232000
      *"$        ": 85;                                               %A01233000
DEFINE                                                                  01234000
      SAVER = REAL NDXO,IIO,YYO; SAVEIT#,                               01235000
      SAVEIT = NDXO~NDX;IIO~II;YYO~YY#,                                 01236000
      RESETER = NDX~NDXO;II~IIO;YY~YYO#;                                01237000
DEFINE   TBLR = TBL[NDX~NDX+1]#;                                        01238000
DEFINE  STNO = LBN ~ LBN+1#;                                            01239000
DEFINE  HEAD = RCA[0,RCX]#,                                             01240000
      TAIL = RCA[1,RCX]#;                                               01241000
%  FORWARD DECLARATIONS                                                 02000000
REAL PROCEDURE AEX;         FORWARD;                                    02001000
REAL PROCEDURE BEX;         FORWARD;                                    02002000
REAL PROCEDURE PRIMARY(B); VALUE B; BOOLEAN B;     FORWARD;             02003000
REAL PROCEDURE EXAMIN(S,VAL); VALUE S,VAL; REAL S; BOOLEAN VAL;         02004000
         FORWARD;                                                       02005000
PROCEDURE EVAL(S,T); VALUE S,T; REAL S,T;         FORWARD;              02006000
BOOLEAN PROCEDURE INPRO; FORWARD;                                       02007000
REAL PROCEDURE SIMPLE2(R,T); VALUE R,T; REAL R,T;         FORWARD;      02008000
REAL PROCEDURE SIMPLE(T); VALUE T; REAL T;         FORWARD;             02009000
PROCEDURE DECLARE;         FORWARD;                                     02010000
PROCEDURE COMPOUNDTAIL;         FORWARD;                                02011000
PROCEDURE STMT;          FORWARD;                                       02012000
PROCEDURE OUTPRO;         FORWARD;                                      02013000
PROCEDURE STEPIT;       FORWARD;                                        02014000
PROCEDURE EVAL2(R); VALUE R; REAL R;         FORWARD;                   02015000
REAL PROCEDURE LISTGEN(BV); VALUE BV; BOOLEAN BV;        FORWARD;       02016000
      PROCEDURE TERPRIN; FORWARD;                                     %P02017000
% MISC ROUTINES                                                         03000000
REAL PROCEDURE AEXP;                                                    03001000
      AEXP ~ EXAMIN(AEX,FALSE);                                         03002000
REAL PROCEDURE BEXP;                                                    03003000
      BEXP ~ EXAMIN(BEX,FALSE);                                         03004000
PROCEDURE PRINRP;                                                       03005000
      PRIN #)#;                                                         03006000
PROCEDURE PCONS(W,T,R); VALUE W,T,R; INTEGER W; REAL T,R;               03007000
      IF T = 2 THEN % I NEED REAL                                       03008000
      IF R = 2 THEN % I HAVE REAL                                       03009000
          BEGIN   NTS(W,11);                                            03010000
         STR ~ OUTSTR(0,20);                                            03011000
      STR    ~ SUBST(STR,"@":"E");                                      03012000
      PRIN STR(0,LENGTH(OUTSTR)); END ELSE                              03013000
      PRIN W ~ W #.# ELSE                                               03014000
      PRIN W ~ W;                                                       03015000
PROCEDURE PRINEQ; PRIN # = #;                                           03016000
PROCEDURE PRINGO; PRIN #GO TO #;                                        03017000
PROCEDURE PRINIF; PRIN #IF (#;                                          03018000
PROCEDURE COMMA;                                                        03019000
      IF FST THEN BEGIN FST ~ FALSE; PRIN #(# END ELSE                  03020000
         PRIN #, #;                                                     03021000
REAL PROCEDURE TBV(X); VALUE X; REAL X;                                 03022000
      TBV ~ TBL[X.[38:10]];                                             03023000
REAL PROCEDURE TBLC(X); VALUE X; REAL X;                                03024000
      TBL[TBLC~NDX~NDX+1]~X;                                            03025000
PROCEDURE TIMER;                                                        03026000
      PRINT #PROCESSOR TIME = # TIME(2)/60,#SECONDS; I/O TIME = #       03027000
     TIME(3)/60,#SECONDS#;                                              03028000
PROCEDURE WRITER;                                                       03029000
      WRITE(OUTFILE,15,LINE);                                           03030000
PROCEDURE STARTBLOCK;                                                   03031000
      BEGIN FORMAT FI(X90,"START OF BLOCK ",I2);                      %P03032000
      IF LISTOG THEN WRITE(OUTFILE,FI,BLOCK);                           03033000
      END OF STARTBLOCK;                                                03034000
PROCEDURE ENDBLOCK(B); VALUE B; REAL B;                                 03035000
      BEGIN FORMAT FI(X90,"END OF BLOCK ",I2,"; NEXT BLOCK ",I2);     %P03036000
      IF LISTOG THEN WRITE(OUTFILE,FI,BLOCK,B);                         03037000
      END OF ENDBLOCK;                                                  03038000
PROCEDURE FLAG(N);     VALUE N; REAL N;                                 03039000
      BEGIN %                                                           03040000
      SWITCH FORMAT FI := ("ERROR #"U"AT:"),("WARNING #"U"AT:"); %      03040100
      STRING STR(40); INTEGER K; %                                      03040500
      SWITCH FORMAT MESS := %                                           03041000
          ("0    SYNTACTIC ENTITY EXPECTED BUT NOT FOUND          "),   03041005
          ("1    VARIABLE CALLED BY VALUE IN ALGOL IS CALLED BY ",      03041010
                "REFERENCE IN FORTRAN                             "),   03041015
          ("2    MISSING LEFT BRACKET                             "),   03041020
          ("3    ILLEGAL ARRAY ROW DESIGNATOR                     "),   03041025
          ("4    ILLEGAL STATEMENT BEGINNER                       "),   03041030
          ("5    ERROR  "),                                             03041035
          ("6    ILLEGAL CONTROL VARIABLE IN FOR LIST ELEMENT     "),   03041040
          ("7    ILLEGAL ARRAY ROW DESIGNATOR                     "),   03041045
          ("8    WRONG NUMBER OF DIMENSIONS IN ARRAY              "),   03041050
          ("9    ARITHMETIC EXPRESSION EXPECTED                   "),   03041055
          ("10   BOOLEAN EXPRESSION EXPECTED                      "),   03041060
          ("11   SYNTACTIC ENTITY OUT OF PLACE                    "),   03041065
          ("12   ERROR  "),                                             03041070
          ("13   ERROR  "),                                             03041075
          ("14   ILLEGAL ELEMENT OF EXPRESSION                    "),   03041080
          ("15   ILLEGAL VARIABLE DECLARATOR TYPE                 "),   03041085
          ("16   SWITCH IDENTIFIER EXPECTED                       "),   03041090
          ("17   ERROR  "),                                             03041095
          ("18   ERROR  "),                                             03041100
          ("19   ERROR  "),                                             03041105
          ("20   ARRAY ROW EXPECTED                               "),   03041110
          ("21   MISSING WITH IN FILL STATEMENT                   "),   03041115
          ("22   ILLEGAL ELEMENT IN FILL STATEMENT                "),   03041120
          ("23   ERROR  "),                                             03041125
          ("24   ERROR  "),                                             03041130
          ("25   MISSING END                                      "),   03041135
          ("26   ENTITY MAY NOT BE PASSED TO A PROCEDURE          "),   03041140
          ("27   MISSING  =  IN DEFINE OR  (  IN LIST DECLARATION "),   03041145
          ("28   ILLEGAL ELEMENT IN DECLARATION LIST              "),   03041150
          ("29   LABEL MAY NOT BE PASSED TO A PROCEDURE           "),   03041155
          ("30   MISSING  (  IN FORMAT DECLARATION                "),   03041160
          ("31   TOO MANY DIMENSIONS IN ARRAY BOUNDS              "),   03041165
          ("32   ELEMENTS IN VALUE PART NOT FORMAL PARAMETERS     "),   03041170
          ("33   ILLEGAL PARAMETER FOR OR TYPE OF A PROCEDURE     "),   03041175
          ("34   ERROR  "),                                             03041180
          ("35   MISSING PARAMETER SPECIFICATION                  "),   03041185
          ("36   ERROR  "),                                             03041190
          ("37   ILLEGAL CONTROL VARIABLE IN FOR STATEMENT        "),   03041195
          ("38   ULLEGAL ENDING OF FOR STATEMENT CONTROL          "),   03041200
          ("39   ERROR  "),                                             03041205
          ("40   OWN USED ILLEGALLY                               "),   03041210
          ("41   SAVE USED ILLEGALLY                              "),   03041215
          ("42   IN USED ILLEGALLY                                "),   03041220
          ("43   OUT USED ILLEGALLY                               "),   03041225
          ("44   ERROR  "),                                             03041230
          ("45   MISSING SEMICOLON AFTER DECLARATION              "),   03041235
          ("46   ERROR  "),                                             03041240
          ("47   ERROR  "),                                             03041245
          ("48   ERROR  "),                                             03041250
          ("49   ERROR  "),                                             03041255
          ("50   ILLEGAL DECLARATORS                              "),   03041260
          ("51   QUOTED STRING TOO LONG                           "),   03041265
          ("52   ILLEGAL ARRAY SPECIFICATION OR DECLARATION       "),   03041270
          ("53   ERROR  "),                                             03041275
          ("54   ERROR  "),                                             03041280
          ("55   ERROR  "),                                             03041285
          ("56   MISSING ASSIGNMENT IN FOR STATEMENT              "),   03041290
          ("57   ERROR  "),                                             03041295
          ("58   ERROR  "),                                             03041300
          ("59   ERROR  "),                                             03041305
          ("60   ERROR  "),                                             03041310
          ("61   ERROR  "),                                             03041315
          ("62   ERROR  "),                                             03041320
          ("63   ERROR  "),                                             03041325
          ("64   ERROR  "),                                             03041330
          ("65   ERROR  "),                                             03041335
          ("66   ERROR  "),                                             03041340
          ("67   ERROR  "),                                             03041345
          ("68   ERROR  "),                                             03041350
          ("69   ERROR  "),                                             03041355
          ("70   WRONG NUMBER OF PARAMETERS TO PROCEDURE          "),   03041360
          ("71   ERROR  "),                                             03041365
          ("72   ERROR  "),                                             03041370
          ("73   ERROR  "),                                             03041375
          ("74   ERROR  "),                                             03041380
          ("75   ERROR  "),                                             03041385
          ("76   ERROR  "),                                             03041390
          ("77   ERROR  "),                                             03041395
          ("78   ERROR  "),                                             03041400
          ("79   ERROR  "),                                             03041405
          ("80   ERROR  "),                                             03041410
          ("81   ERROR  "),                                             03041415
          ("82   ERROR  "),                                             03041420
          ("83   ERROR  "),                                             03041425
          ("84   ERROR  "),                                             03041430
          ("85   ERROR  "),                                             03041435
          ("86   ERROR  "),                                             03041440
          ("87   ERROR  "),                                             03041445
          ("88   ERROR  "),                                             03041450
          ("89   ERROR  "),                                             03041455
          ("90   ILLEGAL DECLARATOR                               "),   03041460
          ("91   ERROR  "),                                             03041465
          ("92   ERROR  "),                                             03041470
          ("93   ERROR  "),                                             03041475
          ("94   ERROR  "),                                             03041480
          ("95   ERROR  "),                                             03041485
          ("96   ERROR  "),                                             03041490
          ("97   ERROR  "),                                             03041495
          ("98   ERROR  "),                                             03041500
          ("99   MISSING SEMICOLON OR END AFTER STATEMENT         "),   03041505
          ("100  UNDECLARED IDENTIFIER                            "),   03041510
          ("101  ERROR  "); %                                           03041515
      IF ERRFLAG THEN BEGIN                                             03042000
      IF NOT LISTOG THEN WRITER;                                        03043000
      IF N GEQ 0 THEN %                                                 03043400
      ERRORCOUNT := ERRORCOUNT + 1; %                                   03043500
      WRITE(LINE,FI[REAL(N LSS 0)],N := ABS(N)); %                      03044000
      LINE(16+(IF DFX=0 THEN COL ELSE DFR[1])) := SYM; %                03044050
      WRITE(OUTFILE,15,LINE); %                                         03044100
      WRITE(OUTFILE,MESS[N:=MIN(N,101)]); %                             03044200
      IF ESPDISK NEQ 0 THEN BEGIN %                                     03044500
       STR := SPACE;   STR := K : SYM; %                                03044550
      LINE(16) := SPACE & STR(0,K+1) & CARD(72,8) & SPACE; %            03044600
      WRITE(REMOTE,15,LINE); %                                          03044700
      WRITE(REMOTE,MESS[N]); %                                          03044720
      END; %                                                            03044750
      LINE := SPACE; %                                                  03044800
      END; %                                                            03044950
      END OF FLAG;                                                      03045000
DEFINE WARN(N) = FLAG(-(N))#; %                                         03045500
PROCEDURE ERR(N); VALUE N; REAL N;                                      03046000
      BEGIN FLAG(N);                                                    03047000
      IF ERRFLAG THEN BEGIN ENDTOG ~ TRUE; STEPIT;                      03048000
      IF TAB > 6 THEN TERPRIN;                                        %P03048100
           ERRFLAG ~ FALSE END;                                         03049000
      END OF ERR;                                                       03050000
BOOLEAN PROCEDURE TEST(X); VALUE X; SYMBOL X;                           03051000
      IF SYM = X THEN STEPIT ELSE BEGIN TEST ~ TRUE; ERR(0); END;       03052000
BOOLEAN PROCEDURE CHECK(X); VALUE X; REAL X;                            03053000
      IF CHECK ~ CLASS ! X THEN ERR(0);                                 03054000
REAL PROCEDURE MK3(A,B,C); VALUE A,B,C; REAL A,B,C;                     03055000
      TBL[MK3~NDX~NDX+1] ~ C & B [18:33:15] & A [3:33:15];              03056000
REAL PROCEDURE MKP(T,R,P); VALUE T,R,P; REAL T,R,P;                     03057000
      MKP ~ P & R [35:45:3] & T [33:46:2];                              03058000
REAL PROCEDURE MKT(X,Y,Z); VALUE X,Y,Z; REAL X,Y,Z;                     03059000
      BEGIN TBLR ~ Z & Y [18:33:15] & X [3:33:15];                      03060000
      X ~ X.[33:2];                                                     03061000
      MKT ~ MKP(IF Y < 4 OR Y = 7 THEN                                  03062000
           (IF X = 2 OR Z.[33:2] = 2 THEN 2 ELSE 1) ELSE                03063000
             IF Y = 4 THEN 2 ELSE                                       03064000
            IF Y = 17 THEN X ELSE 1, IF Y = 17 THEN 5 ELSE 7,NDX);      03065000
      END OF MKT;                                                       03066000
REAL PROCEDURE TEMP(X); VALUE X; REAL X;                                03067000
      TEMP ~ MKP(X,2,IF X = 2 THEN YY~YY+1 ELSE II~II+1);               03068000
DEFINE III = TEMP(1)#, YYY = TEMP(2)#;                                  03069000
PROCEDURE TERPRIN;                                                      03070000
      IF TAB = 6 THEN CON ~ 0 ELSE                                    %P03070500
      BEGIN CONTIN ~ TRUE; TERPRI END;                                  03071000
PROCEDURE PRN(A,B); VALUE A,B; REAL A,B;                                03072000
      BEGIN PRINGO; PRIN   A; TERPRIN; PRINGO; PRIN   B; TERPRIN END; %U03073000
PROCEDURE  PRNC(A,B,C); VALUE A,B,C; REAL A,B; BOOLEAN C;               03074000
      BEGIN PRINGO;         IF C THEN PRIN A ELSE PRIN B; TERPRIN; %  %U03075000
     PRINGO; IF C THEN PRIN B ELSE PRIN A; TERPRIN END; %             %U03076000
PROCEDURE ASSIGNL(V,N,T); VALUE V,N,T;  REAL V,N,T;                     03077000
      BEGIN EVAL(V,1); PRINEQ; PCONS(N,1,T); TERPRIN END;               03078000
PROCEDURE SETSTN(N); VALUE N; REAL N;                                   03079000
      %                                                               %P03080000
      IF STN = 0 THEN STN ~ N ELSE                                      03081000
      BEGIN PRIN #CONTINUE#; TERPRIN; STN ~ N END;                      03082000
PROCEDURE ASSIGN(V,E,T); VALUE V,E,T; REAL V,E,T;                       03083000
      BEGIN EVAL(V,T); PRINEQ; EVAL(E,T); TERPRIN END;                  03084000
PROCEDURE GENGO(X); VALUE X; REAL X;                                    03085000
      BEGIN PRIN #GO TO # X;  TERPRIN  END;                             03086000
PROCEDURE CHKSOB;                                                       03087000
      IF GTA[J~J-1] ! 0 THEN FLAG(50);                                  03088000
REAL PROCEDURE MKCONST(C,T); VALUE C,T; INTEGER C,T;                    03089000
      MKCONST ~ MKP(T,0,TBLC(IF T = 2 THEN C ELSE C ~ C));              03090000
REAL PROCEDURE FIX(T); VALUE T; REAL T;                               %P03091000
      BEGIN LABEL EXIT; REAL R,J;                                     %P03092000
       IF ( R ~ AEXP).[35:3] = 7 THEN  % EXPR                         %P03093000
       IF (J ~ TBV(R)).[18:15] = 0 THEN   % -                         %P03094000
       IF J.[33:5] = 8 THEN  %  -CONST                                %P03095000
          BEGIN TBL[J ~ (FIX ~ J).[38:10]] ~ -TBL[J];                 %P03096000
                          GO EXIT END;                                %P03097000
       FIX ~ SIMPLE2(R,T);                                            %P03098000
   EXIT:                                                              %P03099000
       END OF FIX;                                                    %P03100000
%                                                                       03101000
%                                                                       03102000
PROCEDURE EVBOO(BE); VALUE BE; REAL BE;                               %U03200000
      BEGIN PRINIF; EVAL(BE,1); PRINRP END;                           %U03201000
REAL PROCEDURE NEGATE(B); VALUE B; REAL B;                            %U03202000
      BEGIN REAL J,P; LABEL EXIT;        REAL T; T ~ B;               %U03203000
      IF (NEGATE~B).[35:3] = 7 THEN % EXPR                            %U03204000
      IF P ~ (J~TBL[B~B.[38:10]]).[18:15] > 7  THEN BEGIN             %U03205000
        IF P = 8 THEN  NEGATE ~ J.[33:15] ELSE BEGIN                  %U03206000
          P ~ IF BOOLEAN(P) THEN P + 1 ELSE P - 1;                    %U03207000
TBL[B] ~(IF P>10 THEN J.[33:15] ELSE NEGATE(J.[33:15])) & P[18:33:15] %U03208000
& (IF P>10THEN J.[3:15] ELSE NEGATE(J.[3:15])) [3:33:15]END;          %U03209000
          GO EXIT END;                                                %U03210000
        NEGATE ~ MKT(0,8,T);                                          %U03211000
   EXIT: END OF NA  NEGATE;                                           %U03212000
PROCEDURE FORTRANIF(BE,LB,N); VALUE BE,LB,N; REAL  BE,LB;             %U03213000
            BOOLEAN N;                                                %U03214000
      BEGIN EVBOO(IF N THEN NEGATE(BE) ELSE BE);                      %U03215000
          PRIN # GO TO # LB; TERPRIN END;                             %U03216000
%  EXPRESSION SCANNERS                                                  04000000
REAL PROCEDURE FACTOR(T); VALUE T; REAL T;                              04001000
      BEGIN                                                             04002000
      WHILE SYM = "*" DO BEGIN                                          04003000
      STEPIT;                                                           04004000
      T ~ MKT(T,7,PRIMARY(FALSE)); END;                                 04005000
      FACTOR ~ T;                                                       04006000
      END OF FACTOR;                                                    04007000
REAL PROCEDURE TERM(T); VALUE T; REAL T;                                04008000
      BEGIN REAL P;                                                     04009000
      WHILE P ~ CLASS } 58 AND CLASS { 61 DO BEGIN                      04010000
      STEPIT;                                                           04011000
      T ~ MKT(T,P-55,FACTOR(PRIMARY(FALSE)));     END;                  04012000
      TERM ~ T;                                                         04013000
      END OF TERM;                                                      04014000
REAL PROCEDURE  SIMPARITH(T); VALUE T; REAL T;                          04015000
      BEGIN REAL P;                                                     04016000
      T ~ TERM(T);                                                      04017000
      WHILE P ~ CLASS = 56 OR CLASS = 57  DO BEGIN  STEPIT;             04018000
      T ~ MKT(T,P-55,TERM(FACTOR(PRIMARY(FALSE)))); END;                04019000
      SIMPARITH ~ T;                                                    04020000
      END OF SIMPARITH;                                                 04021000
REAL PROCEDURE ARITHSEC;                                                04022000
      BEGIN BOOLEAN B;                                                  04023000
      REAL R;                                                           04024000
      IF SYM = "+" OR B ~ SYM = "-" THEN STEPIT;                        04025000
      R ~ FACTOR(PRIMARY(FALSE));                                       04026000
      ARITHSEC ~ IF B THEN MKT(0,0,R) ELSE R                            04027000
      END OF ARITHSEC;                                                  04028000
REAL PROCEDURE BOOPRIM;                                                 04029000
      BEGIN REAL T; BOOLEAN B;                                          04030000
      IF B ~ SYM = "NOT" THEN STEPIT;                                   04031000
      IF T ~ PRIMARY(TRUE) > 0 THEN FLAG(10);                           04032000
      T ~ ABS(T);                                                       04033000
      BOOPRIM ~ IF B THEN MKT(0,8,T) ELSE T;                            04034000
      END OF BOOPRIM;                                                   04035000
REAL PROCEDURE BOOTERM(T); VALUE T; REAL T;                             04036000
      BEGIN                                                             04037000
      WHILE SYM = "AND" DO BEGIN STEPIT;                                04038000
         T ~ MKT(T,10,BOOPRIM) END;                                     04039000
       BOOTERM ~ T;                                                   %P04039500
      END OF BOOTERM;                                                   04040000
REAL PROCEDURE IFXP(V); VALUE V;  BOOLEAN V;                            04041000
      BEGIN LABEL EXIT; REAL A,B,C;                                     04042000
       STEPIT;                                                        %P04042500
      A ~ BEX;                                                          04043000
      IF TEST("THEN") THEN GO EXIT;                                     04044000
      B ~ IF V THEN BEX ELSE AEX;                                       04045000
      IF TEST("ELSE") THEN GO EXIT;                                     04046000
      C ~ IF V THEN BEX ELSE AEX;                                       04047000
      A ~ MK3(A,B,C);                                                   04048000
      IFXP ~ MKP(IF V THEN 1 ELSE                                       04049000
         IF B.[33:2] = 2 OR C.[33:2] = 2 THEN 2 ELSE 1,6,A);            04050000
   EXIT:                                                                04051000
      END OF IFXP;                                                      04052000
REAL PROCEDURE AEX;                                                     04053000
      AEX ~ IF SYM = "IF" THEN IFXP(FALSE) ELSE SIMPARITH(ARITHSEC);    04054000
REAL PROCEDURE SIMPBOO(T); VALUE T; REAL T;                             04055000
      BEGIN T ~ BOOTERM(T);                                             04056000
      WHILE SYM = "OR" DO BEGIN                                         04057000
      STEPIT;                                                           04058000
      T ~ MKT(T,9,BOOTERM(BOOPRIM)) END;                                04059000
      SIMPBOO ~ T;                                                      04060000
      END OF SIMPBOO;                                                   04061000
REAL PROCEDURE BEX;                                                     04062000
      BEX ~ IF SYM = "IF" THEN IFXP(TRUE) ELSE SIMPBOO(BOOPRIM);        04063000
REAL PROCEDURE PANA;                                                    04064000
      BEGIN LABEL EXIT;                                                 04065000
       IF TEST("(") THEN GO EXIT; PANA ~ AEX;                         %P04066000
       IF TEST(")") THEN GO EXIT;                                       04067000
   EXIT:                                                                04068000
      END OF PANA;                                                      04069000
REAL PROCEDURE NEXTCHARACTER;                                         %F04069200
      BEGIN                                                           %F04069400
      IF COL > RMARGI THEN IF EOFTOG := INPRO THEN RETURN """; %      %F04069600
      NEXTCHARACTER := REAL(CARD(COL,1));  COL := COL + 1;            %F04069800
      END;                                                            %F04069900
REAL PROCEDURE HOL;                                                     04070000
      BEGIN REAL TCOL,LIM;                                              04071000
       REAL N;                                                          04072000
      STRING  STR(6);                                                   04073000
      STR := SPACE;                                                   %F04073500
      LIM := IF S360 THEN 4 ELSE 6;                                   %F04074000
      WHILE TCOL := NEXTCHARACTER NEQ """ AND N:=N+1 { LIM DO         %F04075000
            STR(N-1,1) := STRING(TCOL,1);                             %F04076000
   IF TCOL!""" THEN BEGIN WARN(051); WHILE NEXTCHARACTER!"""DO; END;  %F04077000
      TBL[HOL:=NDX:=NDX+1] := REAL(STR(0,6)) & "H" [6:42:6] &         %F04077500
            LIM[1:43:5];                                              %F04078000
      STEPIT;                                                         %F04078500
      END OF HOL;                                                       04079000
REAL PROCEDURE EXTEND(T); VALUE T; REAL T;                              04080000
      BEGIN                                                             04081000
      REAL P;                                                           04082000
      IF T  > 0 THEN BEGIN T ~ SIMPARITH(T);                            04083000
      IF P ~ CLASS } 66 AND CLASS { 71 THEN BEGIN                       04084000
            STEPIT; T ~ - MKT(T,P-55,AEX); END END;                     04085000
      EXTEND ~ T;                                                       04086000
      END OF EXTEND;                                                    04087000
REAL PROCEDURE EXPRSS;                                                  04088000
BEGIN REAL A,B,T;                                                       04089000
      LABEL EXIT;                                                       04090000
      IF SYM = "IF" THEN BEGIN                                          04091000
      STEPIT; A ~ BEX;  IF TEST("THEN") THEN GO EXIT;                   04092000
      B ~ EXPRSS; IF TEST("ELSE") THEN GO EXIT;                         04093000
      C ~ IF B < 0 THEN BEX ELSE AEX;                                   04094000
      T ~ MKP(IF B < 0 THEN 1 ELSE                                      04095000
         IF B.[33:2]=2 OR C.[33:2]=2 THEN 2 ELSE 1,6,MK3(A,B,C));       04096000
      IF B < 0 THEN T ~ - T;                                            04097000
          END ELSE                                                      04098000
      IF SYM = "NOT" THEN T ~ BEX ELSE                                  04099000
      IF SYM = "+" OR SYM = "-" THEN T ~ EXTEND(AEX) ELSE               04100000
      T ~ EXTEND(PRIMARY(TRUE));                                        04101000
      IF T < 0 THEN T ~ -SIMPBOO(ABS(T));                             %P04102000
      EXPRSS ~ T;                                                       04103000
   EXIT:                                                                04104000
      END OF EXPRSS;                                                    04105000
REAL PROCEDURE IMPFUN;                                                  04106000
BEGIN LABEL EXIT;                                                       04107000
      REAL T;                                                           04108000
      REAL J,P,R,S,W;                                                   04109000
      ARRAY INX[0:127]; %                                               04109500
      IF P ~ CLASS < 74 OR CLASS > 81 THEN BEGIN                        04110000
           ERR(11); IMPFUN ~ ZERO END ELSE                              04111000
      BEGIN T ~ 2;                                                      04112000
      CASE CLASS - 74 OF BEGIN                                          04113000
      BEGIN W := "ABS"; T := "I000" END; % 74                         %F04114000
      BEGIN % 75                                                      %F04114900
      STR := W : INSYM; %                                               04115000
      W := REAL(STR(0,MIN(7,W))); %                                     04115100
      END; %                                                          %F04115500
      W := "TIME"; % 76                                                 04116000
      W := IF SYM = "LN" THEN "ALOG" ELSE %                             04117000
           IF SYM = "LNGAM" THEN "ALGAMA" ELSE "LOG10"; % 77            04117100
      W := IF SYM = "ARCTAN" THEN "ATAN" ELSE "ARSIN"; % 78             04118000
      W ~ "SQRT"; % 79                                                  04119000
      BEGIN W ~ "SIGN"; T ~ "I0000" END; % 80                         %U04120000
      W ~ "INT"; % 81                                                 %U04121000
          END;                                                          04122000
       STEPIT;                                                        %P04122500
      IF W = "MIN" OR W = "MAX" THEN BEGIN %                            04122600
      W := 0 & W [24:30:18]; %                                          04122605
         TBLR := W; P := NDX := NDX + 1; T := 1; J := -1; %             04122610
         DO BEGIN STEPIT; IF (        AEX).[33:2] = 2 THEN T := 2;      04122620
         INX[J := J + 1] := NDX; %                                      04122625
         END UNTIL SYM NEQ ","; %                                       04122630
      IF SYM = ")" THEN STEPIT ELSE FLAG(0); %                          04122635
      TBL[P] := NDX - P; %                                              04122640
      FOR J := J STEP -1 UNTIL 0 DO TBL[INX[J]].[18:15] := T; %         04122645
      J := P - 1; IF T = 2 THEN TBL[J] := W + "A0001"; %                04122650
      END ELSE BEGIN %                                                  04122690
      IF (R~PANA).[33:2] ! 2 AND T > 2 THEN BEGIN W ~ W + T;          %U04123000
          T ~ 1 END ELSE T ~ 2;                                       %U04123100
      IF P=81 THEN T ~ 1; %                                           %U04123200
      IF CLASS = 76 THEN BEGIN R.[33:2] := 1; T := 1; END; %            04123300
      IF P = 80 THEN BEGIN   IF TEST("|") THEN GO EXIT;                 04124000
         S ~ FACTOR(PRIMARY(FALSE)) END;                                04125000
      TBLR ~ W;                                                         04126000
      J ~ NDX; TBLR ~ REAL(P=80) + 1;                                   04127000
      TBLR ~ R & (T + REAL(P=81))[18:33:15];                            04128000
      IF P = 80 THEN BEGIN  TBLR ~ TBL[NDX-1];                        %P04129000
                     TBL[NDX-1] ~ S & 1 [18:33:15] END;               %P04129500
      END; %                                                            04129600
      IMPFUN ~ MKP(T,4,J);         END;                                 04130000
   EXIT:                                                                04131000
      END OF IMPFUN;                                                    04132000
REAL PROCEDURE PRIMER(B,PARAM);                                         04133000
      VALUE B,PARAM;                                                    04134000
      BOOLEAN B,PARAM;                                                  04135000
BEGIN LABEL EXIT;                                                       04136000
      ARRAY PAR[0:127]; %                                               04137000
      INTEGER I,K; SYMBOL T;                                            04138000
      REAL J,N,S,P,STNL;                                                04139000
      LABEL L1,L2,L3;                                                   04140000
      REAL WT;                                                          04141000
      ALPHA W;                                                          04142000
      IF BLOCK > 1 AND WHC > 0     THEN                                 04143000
      IF WHC.[11:7] = 1 THEN                                            04144000
      IF CLASS } BOOID AND CLASS { INTARRAYID THEN                      04145000
           WH(INFO) ~ - WHC;  % MARK COMMON                             04146000
      K ~ (I ~ CLASS - 7) MOD 3;                                        04147000
      I ~ I DIV 3;                                                      04148000
      WT ~ WHC;                                                         04149000
      W ~ WH(T~ATSM(1,INFO)); STEPIT;                                   04150000
      IF I = 3 THEN BEGIN % ARRAY                                       04151000
        IF SYM = "[" THEN STEPIT ELSE                                   04152000
         IF PARAM THEN BEGIN I ~ 2; GO L3 END ELSE                      04153000
           BEGIN FLAG(2); GO EXIT END;                                  04154000
      PAR[0] ~ N ~ WH(T~ATSM(WT));                                      04155000
L1:   J ~ J + 1;                                                        04156000
      S ~ WH(T~ATSM(1,T));                                              04157000
      IF SYM = "*" THEN BEGIN  STEPIT; B ~ FALSE        ;               04158000
          IF ROW THEN ROW ~ FALSE ELSE FLAG(7);                         04159000
          ROWTOG ~ TRUE;                                                04160000
         PAR[J] ~ ROWV ~ TEMP(1); ROWSIZE ~ S.[33:15];                  04161000
      IF J ! N THEN FLAG (8) END ELSE                                   04162000
      PAR[J] ~ AEX & S[1:1:32];                                         04163000
      IF J ! N THEN BEGIN IF TEST(",") THEN GO EXIT ELSE GO L1 END;     04164000
      IF TEST("]") THEN GO EXIT;                                        04165000
         END % OF ARRAY PART                                            04166000
         ELSE                                                           04167000
      IF I < 2 THEN BEGIN % PROCID                                      04168000
      IF B AND SYM = "~" THEN BEGIN                                     04169000
         TBLR ~ W; STEPIT;                                              04170000
      P ~ MKP(I~IF K=1 THEN 2 ELSE 1,5,                                 04171000
          MK3(MKP(I,1,NDX),0,IF K = 0 THEN BEX ELSE AEX));              04172000
         GO EXIT END;                                                   04173000
       IF PAR[0] ~ N ~ WH(T~ATSM(WT)) = 0 THEN BEGIN                  %P04174000
      IF I ! 0 THEN BEGIN PAR[0] ~ N ~ 1;                               04175000
            PAR[J~1] ~ ZERO END END ELSE                                04176000
      BEGIN IF TEST("(") THEN GO EXIT;                                  04177000
L2:   PARAM ~ TRUE; PAR[J~J+1] ~(S~WH(T~ATSM(1,T)))                     04178000
         & (IF S ~ S.[33:15] = 0 THEN AEX ELSE IF S= 1 THEN BEX ELSE    04179000
            PRIMER(FALSE,TRUE))[33:33:15];                              04180000
      IF S = 2 THEN                                                   %P04180100
      IF (S~PAR[J]).[33:2] ! S.[18:15] THEN FLAG(70);                 %P04180200
      IF J ! N THEN IF TEST(",") THEN GO EXIT ELSE GO L2;               04181000
      IF TEST(")") THEN GO EXIT;                                        04182000
      END;                                                              04183000
           END ELSE                                                     04184000
L3:   J ~ -1;                                                           04185000
      TBLR ~ W;                                                         04186000
      P ~ NDX;                                                          04187000
      FOR N ~ 0 STEP 1 UNTIL J DO TBLR ~ PAR[N];                        04188000
      P ~ MKP(IF K = 1 THEN 2 ELSE 1,IF I=2 THEN 1 ELSE                 04189000
            IF I = 3 THEN 3 ELSE 4,P);                                  04190000
      IF B THEN IF SYM= "~" THEN BEGIN STEPIT;                          04191000
         IF WT.[24:2] = 3 AND I = 2 THEN WARN(1);                     %P04192000
       %                                                              %P04193000
      P ~ MKP(IF K = 1 THEN 2 ELSE 1,5,MK3(P,0,                       %P04194000
                 IF K = 0 THEN BEX ELSE AEX)) END;                    %P04194100
   EXIT:  PARAM ~ FALSE;                                                04195000
      PRIMER ~ IF K = 0 THEN -P ELSE P;                                 04196000
      END OF PRIMER;                                                    04197000
REAL PROCEDURE VAR;                                                     04198000
      BEGIN                                                             04199000
      IF CLASS ! REALID AND CLASS ! INTID THEN FLAG(15) ELSE            04200000
      VAR ~ PRIMER(FALSE,FALSE);                                        04201000
      IF ROWTOG THEN ROWTOG ~ FALSE;                                    04202000
      END OF  VAR;                                                      04203000
REAL PROCEDURE PRIMARY(B); VALUE B; BOOLEAN B;                          04204000
      BEGIN REAL T;                                                     04205000
      LABEL EXIT;                                                       04206000
      IF CLASS } 10 AND CLASS { 26 THEN                                 04207000
         IF CLASS { 18 THEN BEGIN                                       04208000
      T ~ PRIMER(TRUE,FALSE);                                           04209000
      IF ROWTOG THEN BEGIN FLAG(3); ROWTOG ~ FALSE END END ELSE         04210000
      CASE CLASS - 19 OF BEGIN                                          04211000
      T ~ HOL; % "                                                      04212000
      BEGIN T ~ MKCONST(C,1);  % FCONST STEPIT END                      04213000
            STEPIT END;                                                 04214000
      BEGIN  T ~ MKCONST(C,2); % RCONST                                 04215000
              STEPIT END;                                               04216000
      IF B THEN BEGIN  %  (                                             04217000
      STEPIT; T ~ EXPRSS; IF TEST(")") THEN GO EXIT END ELSE            04218000
                T ~ PANA;                                               04219000
      BEGIN T ~ -TRUTH; STEPIT  END; %TRUE                            %U04220000
      BEGIN T ~ -FALSIE; STEPIT END; %FALSE                           %U04221000
      BEGIN STEPIT; T ~ PANA+32768; TBLR ~ "BOOL"; TBLR ~ 1; %        %U04222000
        TBLR ~ T; T ~ -MKP(1,4,NDX-2)  END; % BOOLEAN                 %U04222100
      BEGIN STEPIT; IF TEST("(") THEN GO EXIT; T := BEX+32768; %        04223000
      TBLR := "REALFN"; TBLR := 1;   TBLR := T;   T := -MKP(1,4,NDX-2); 04223500
      IF TEST(")") THEN GO EXIT END; % REAL                             04224000
           END ELSE T ~ IMPFUN;                                         04225000
      IF B THEN T ~ EXTEND(T) ELSE IF T < 0 THEN BEGIN FLAG(9); T ~ ABS 04226000
      (T) END;  PRIMARY ~ T;                                            04227000
   EXIT:                                                                04228000
      END OF PRIMARY;                                                   04229000
REAL PROCEDURE LISTELEMENT(BV); VALUE BV; BOOLEAN BV;                   04230000
      BEGIN LABEL EXIT;                                                 04231000
       LABEL L;                                                       %P04231500
      REAL V,A,B,C,D;                                                   04232000
      NOEVAL ~ BV;                                                      04233000
      IF SYM = "FOR" THEN BEGIN                                         04234000
      STEPIT;                                                           04235000
      IF CLASS ! INTID THEN FLAG(6);                                    04236000
      V ~ VAR; IF TEST("~") THEN GO EXIT; A ~ SIMPLE(1);                04237000
      IF TEST("STEP") THEN GO EXIT;                                     04238000
      B ~ SIMPLE(1); IF TEST("UNTIL") THEN GO EXIT; C ~ SIMPLE(1);      04239000
      IF TEST("DO") THEN GO EXIT;                                       04240000
      IF SYM = "[" THEN BEGIN STEPIT; D ~ LISTGEN(TRUE);                04241000
      IF TEST("]") THEN GO EXIT END ELSE D ~ LISTELEMENT(TRUE);         04242000
      LISTELEMENT ~ MK3(V,0,-D);    D ~ MK3(A,C,B);      END ELSE       04243000
      BEGIN                                                             04244000
      IF CLASS = 17 OR CLASS = 18 THEN  BEGIN    % ARRAY                04245000
      ROW ~ TRUE; D ~ PRIMER(TRUE,FALSE);                               04246000
      ROW ~ FALSE;                                                    %P04246500
      IF ROWTOG THEN BEGIN ROWTOG ~ FALSE;                              04247000
           C ~ IF RSIZETOG THEN RSIZE ELSE MKCONST(ROWSIZE,1);          04248000
      D ~ TBLC(D);                                                    %P04248500
      LISTELEMENT ~ MK3(ROWV,0,-D); D ~ MK3(ONE,C,ONE);                 04249000
      GO EXIT END;                                                      04250000
      IF D = D ~ SIMPARITH(FACTOR(D)) THEN BEGIN D ~ EXAMIN(D,FALSE); %P04251000
         GO L END END ELSE D ~ ABS(EXPRSS);                           %P04251100
      D ~ SIMPLE2(D,D.[33:2]);                                          04252000
      IF D.[33:5] { 8 THEN BEGIN ASSIGN(A~III,D,1); D~A END;          %P04252100
   L:                                                                 %P04252500
      TBLR ~ D; LISTELEMENT ~ NDX; END;                                 04253000
   EXIT:                                                                04254000
      NOEVAL ~ FALSE;                                                   04255000
      END OF LISTELEMENT;                                               04256000
REAL PROCEDURE LISTGEN(BV); VALUE BV; BOOLEAN BV;                       04257000
      BEGIN REAL T;                                                     04258000
      LISTGEN ~ T ~ LISTELEMENT(BV);                                    04259000
      WHILE SYM = "," DO BEGIN STEPIT;                                  04260000
      TBL[T].[18:15] ~ T ~ LISTELEMENT(BV) END                          04261000
      END OF LISTGEN;                                                   04262000
%  EXPRESSION EXAMINERS                                                 05000000
BOOLEAN PROCEDURE PROD(X); VALUE X; REAL X;                             05001000
      BEGIN REAL R;                                                     05002000
      IF R ~ X.[35:3] { 2 THEN PROD ~ TRUE ELSE                         05003000
      IF R = 7 THEN                                                     05004000
      IF (X~TBV(X)).[18:15] = 3 THEN                                    05005000
      IF X.[5:3] { 2 THEN                                               05006000
      PROD ~ X ~ X.[35:3] = 1 OR X = 2                                  05007000
      END OF PROD;                                                      05008000
PROCEDURE SUBSCRIPT(P); VALUE P; REAL P;                                05009000
      BEGIN LABEL L,EXIT;                                               05010000
      REAL T,R;                                                         05011000
       REAL V,CN,K,S;                                                 %P05012000
      K ~ (T~EXAMIN(V~TBL[P],TRUE)).[38:10];                            05013000
      CN ~ SIGN(V) | V.[18:15];                                         05014000
      IF V ~ T.[35:3] = 0 THEN BEGIN                                    05015000
           TBL[K] ~ TBL[K] + CN; GO EXIT END;                           05016000
      IF V = 7 THEN                                                     05017000
      IF S ~ (R ~ TBL[K]).[18:15] = 2 OR S = 1 THEN                     05018000
      IF R.[35:3] = 0 THEN                                              05019000
      IF PROD(R.[3:15]) THEN BEGIN                                      05020000
       IF CN ~ TBL[R.[38:10]] & S [1:47:1] + CN = 0 THEN              %P05021000
        TBL[P] ~ R.[3:15] ELSE                                          05022000
         BEGIN TBL[R.[38:10]] ~ ABS(CN);                                05023000
      %                                                               %P05024000
                  TBL[K].[18:15] ~ IF CN < 0 THEN 1 ELSE 2;           %P05025000
       END;                                                             05026000
      GO EXIT END;                                                      05027000
       IF NOT PROD(T) THEN BEGIN ASSIGN(V~III,T,1); T ~ V END;        %P05028000
      TBL[P] ~ IF CN = 0 THEN T ELSE MKT(T,REAL(CN}0)+1,                05029000
                MKCONST(ABS(CN),1));                                    05030000
   EXIT:                                                                05031000
      END OF SUBSCRIPT;                                                 05032000
REAL PROCEDURE COND(S,V,LB,VAL); VALUE S,V,LB,VAL;                      05033000
      REAL S,V,LB; BOOLEAN VAL;                                         05034000
      BEGIN BOOLEAN BV;                                                 05035000
      REAL A,B;                                                         05036000
       REAL T,IIL,IILL,YYL,YYLL,R,LO,TP,BE;                           %P05037000
      IILL ~ II; YYLL ~YY;                                              05038000
      BE ~ (R ~ TBL[S.[38:10]]).[3:15]; LO ~ R.[18:15];                 05039000
      IF V ! 0 THEN BEGIN V ~ EXAMIN(V,FALSE);                          05040000
     T ~ V; END ELSE                                                  %U05041000
       %                                                              %U05042000
      T ~ IF S.[33:2] = 2 THEN YYY ELSE III;                            05043000
      COND ~ T;                                                         05044000
      IIL ~ II; YYL ~ YY; TP ~ T.[33:2];                                05045000
        FORTRANIF(EXAMIN(BE,TRUE),B~STNO,TRUE); II~ IIL;YY~YYL;       %U05046000
      IF LO.[35:3] = 6 THEN J ~ COND(LO,T,LB,FALSE) ELSE                05050000
            ASSIGN(T,LO~EXAMIN(LO, TRUE),TP)    ;                     %U05051000
      GENGO(LB);                                                        05052000
      II~IIL; YY ~ YYL; SETSTN(B);                                      05053000
      IF R.[35:3] = 6 THEN J ~ COND(R,T,LB,FALSE) ELSE                  05054000
   ASSIGN(T,EXAMIN(R,TRUE),TP);    IF VAL THEN                        %U05055000
      SETSTN(LB);                                                       05056000
        %                                                             %U05057000
      II ~ IILL; YY ~ YYLL;                                             05058000
      END OF COND;                                                      05059000
REAL PROCEDURE EXAMIN(S,VAL); VALUE S,VAL; REAL S; BOOLEAN VAL;         05060000
      BEGIN REAL T,P,R,V;                                               05061000
      CASE S.[35:3] OF BEGIN                                            05062000
      EXAMIN ~ S;  % CONSTANT                                           05063000
      EXAMIN ~ S;  % 1 VARIABLE                                         05064000
      EXAMIN ~ S;  % 2 TEMP                                             05065000
      BEGIN % 3 ARRAY                                                   05066000
      EXAMIN ~ S;                                                       05067000
      IF S ~ TBL[P~S.[38:10]+1] ! 0 THEN                                05068000
      FOR R ~ 1 STEP 1 UNTIL S DO SUBSCRIPT(P+R);  END;                 05069000
      BEGIN % 4 PROCID                                                  05070000
      EXAMIN ~ S;                                                       05071000
      IF S ~ TBL[P~S.[38:10]+1]! 0 THEN                                 05072000
      FOR R ~ 1 STEP 1 UNTIL S DO TBL[P+R].[33:15] ~                    05073000
         EXAMIN(TBL[R+P].[33:15],FALSE);     END;                       05074000
      BEGIN % 5 ASSIGN                                                  05075000
      IF P ~ (R ~ TBL[ V ~ S.[38:10]]).[35:3] = 6 THEN % COND EXPR      05076000
EXAMIN ~ COND(R.[33:15],R.[3:15],STNO,TRUE) ELSE                      %U05077000
      BEGIN                                                             05078000
      TBL[V] ~ R & (V~EXAMIN(R.[3:15],TRUE)) [3:33:15]                  05079000
       & EXAMIN(R,TRUE) [33:33:15];                                   %U05080000
      IF VAL THEN BEGIN                                                 05081000
          EXAMIN ~ V;                                                   05084000
      EVAL(S,0); TERPRIN END      ELSE                                  05085000
      EXAMIN ~ S; END END;                                              05086000
      % 6 COND                                                          05087000
EXAMIN ~ COND(S,0,STNO,TRUE);                                         %U05088000
      BEGIN % 7                                                         05089000
      IF P ~ (R~TBL[V~(EXAMIN ~ S).[38:10]]).[18:15] ! 0 AND P ! 8      05090000
         THEN TBL[V].[3:15] ~ EXAMIN(R.[3:15],TRUE); %                %U05091000
      TBL[V].[33:15] ~ EXAMIN(R,TRUE) END; END;                       %U05092000
      END OF EXAMIN;                                                    05093000
% EXPRESSION EVALUATORS                                                 06000000
PROCEDURE EVAL2(R); VALUE R; REAL R;                                    06001000
      EVAL(R,R.[33:2]);                                                 06002000
PROCEDURE DOTHEMOD(W); VALUE W; REAL W;                                 06003000
      BEGIN REAL R,S; INTEGER I,K;                                      06004000
      LABEL EXIT;                                                       06005000
R := W.[3:15];                                                        %U06006000
%                                                                     %U06007000
%                                                                     %U06008000
%                                                                     %U06009000
%                                                                     %U06010000
%                                                                     %U06011000
%                                                                     %U06012000
%                                                                     %U06013000
%                                                                     %U06014000
%                                                                     %U06015000
      IF R.[33:2]=2 OR  W.[33:2]=2 THEN PRIN #A#; %                   %U06015500
      PRIN #MOD(#; EVAL(R,1); %                                       %U06016000
      PRIN #,#; EVAL(W,1); PRIN #)#;                                    06017000
   EXIT:                                                                06018000
      END OF DOTHEMOD;                                                  06019000
PROCEDURE EVALEXP(W,R); VALUE W,R; REAL W,R;                            06020000
      BEGIN REAL T,S,P; BOOLEAN B,LP;                                   06021000
      IF P ~ W.[18:15] = 6 THEN DOTHEMOD(W) ELSE                        06022000
      BEGIN T ~ IF P < 6 THEN R ELSE                                    06023000
      IF P = 7 THEN 2 ELSE IF P } 11 THEN W.[3:2] ELSE 1; %             06024000
      IF B ~ P { 10 AND P } 1 AND W.[5:3] = 7 THEN PRIN #(#; %        %U06025000
      %                                                               %P06026000
      %                                                               %P06027000
      %                                                               %P06028000
      IF P ! 0 AND P ! 8 THEN EVAL(W.[3:15],T);                         06029000
      IF B THEN PRIN #)#;                                               06030000
      CASE P OF BEGIN                                                   06031000
      PRIN # - #; %  % 0                                                06032000
      PRIN # - #; % 1                                                   06033000
      PRIN # + #; % 2                                                   06034000
      PRIN # * #; % 3                                                   06035000
      PRIN # / #; % 4                                                   06036000
      PRIN # / #; % 5                                                   06037000
      ;  %  6                                                           06038000
      PRIN # ** #;  % 7                                                 06039000
      PRIN # .NOT. #; % 8                                             %P06040000
      PRIN # .OR. #; % 9                                              %P06041000
      PRIN # .AND. #; % 10                                            %P06042000
      PRIN # .LT. #; % 11                                             %P06043000
      PRIN # .GE. #; % 12                                             %U06044000
      PRIN # .GT. #; % 13                                             %U06045000
      PRIN # .LE. #; % 14                                             %P06046000
      PRIN # .EQ. #; % 15                                               06047000
      PRIN # .NE. #;        END;                                        06048000
      T ~ IF P < 6 THEN R ELSE                                          06049000
           IF P = 7 OR P } 11 THEN  W.[33:2] ELSE 1;                    06050000
      IF B ~ W.[35:3]=7 AND ((P{7 AND P!2) OR P = 8) THEN PRIN #(#;   %U06051000
      EVAL(W,T);                                                        06052000
      IF B OR LP THEN PRIN #)#;       END                               06053000
      END OF EVALEXP;                                                   06054000
PROCEDURE EVAL(S,T); VALUE S,T; REAL S,T;                               06055000
      BEGIN BOOLEAN RTP,CF;                                             06056000
      LABEL EXIT; REAL R,P; ALPHA W;                                    06057000
      IF NOEVAL THEN BEGIN FLAG(14); GO EXIT END;                       06058000
      IF WARNTOG THEN BEGIN WARNTOG := FALSE; WARN(62); END; %          06058500
      R ~ S.[33:2];                                                     06059000
      W ~ TBL[P~S.[38:10]];                                             06060000
       IF RTP ~ S ~ S.[35:3] ! 0 AND T ! R AND S ! 5 THEN             %P06061000
      IF  CF ~ T!2 THEN PRIN #IFIX(# ELSE PRIN #FLOAT(#; %            %U06062000
      CASE S OF BEGIN                                                   06063000
       IF R = 0 THEN PRIN W ELSE PCONS(W,T,R); % CONST                %P06064000
      PRIN W;  % VAR                                                    06065000
      BEGIN IF R = 2 THEN PRIN #YYY# ELSE PRIN #III#;                   06066000
           PRIN P END;  %  TEMP                                         06067000
      BEGIN PRIN W;                                                     06068000
        IF S ~ TBL[P ~ P + 1] ! 0 THEN BEGIN  FST ~ TRUE;               06069000
      FOR R ~ 1 STEP 1 UNTIL S DO BEGIN COMMA;                          06070000
               EVAL(TBL[P + R],1) END;                                  06071000
      PRIN #)# END; END;  %  ARRAY                                      06072000
      BEGIN PRIN W;                                                     06073000
      IF S ~ TBL[P~P + 1] ! 0 THEN BEGIN FST ~ TRUE;                    06074000
          FOR R ~ 1 STEP 1 UNTIL S DO BEGIN COMMA;                      06075000
               EVAL(W~TBL[P + R],W.[18:15]) END;                        06076000
      PRIN #)# END;  %                                                  06077000
           END; %  PROCID                                               06078000
      BEGIN  % ASSIGN                                                   06079000
      EVAL(W.[3:15],R~W.[3:2]);  PRINEQ;                                06080000
      EVAL(W.[33:15],P~W.[33:2]);                                       06081000
      IF R < 2 AND P = 2 THEN PRIN # + .5# END;                         06082000
      ERROR("C1");                                                      06083000
      EVALEXP(W,R);         END;                                        06084000
      IF CF THEN PRIN     # + .5#;                                      06085000
      IF RTP THEN PRIN #)#;                                             06086000
   EXIT:                                                                06087000
      END OF EVAL;                                                      06088000
PROCEDURE DOLOOP(V,A,B,C); VALUE V,A,B,C; REAL V,A,B,C;                 06089000
       BEGIN LABEL L;  PRIN SPACE;                                    %P06090000
       EVAL(V,1); PRINEQ; EVAL(A,1);                                  %P06090100
      PRIN #,#; EVAL(B,1);                                              06091000
       IF C.[33:5] = 8 THEN IF TBV(C) = 1 THEN GO L;                  %P06092000
       PRIN #,#; EVAL(C,1);                                           %P06092100
   L:                                                                 %P06092200
      END OF DOLOOP;                                                    06093000
PROCEDURE EVLIST(R); VALUE R; REAL R;                                   06094000
      BEGIN REAL S;                                                     06095000
      WHILE R ! 0 DO BEGIN                                              06096000
      IF S ~ TBL[R] < 0 THEN BEGIN                                      06097000
          PRIN #(#; EVLIST(S.[33:15]);                                  06098000
      PRIN #,#;                                                         06099000
      DOLOOP(S.[3:15],(R~TBL[R+1]).[3:15],R.[18:15],R.[33:15]);         06100000
      PRIN #)#; END ELSE                                                06101000
      EVAL2(S);                                                         06102000
      IF R ~ S.[18:15] ! 0 THEN PRIN #,#;  END                          06103000
      END OF EVLIST;                                                    06104000
REAL PROCEDURE SIMPLE2(R,T); VALUE R,T; REAL R,T;                       06105000
      BEGIN                                                             06106000
      IF R .[33:2] ! T OR R.[35:3] > 2 THEN BEGIN                     %P06107000
       IF ( R ~ EXAMIN(MKP(T,5,MK3(SIMPLE2 ~ TEMP(T),0,R)),FALSE))    %P06108000
       .[35:3] }5 THEN BEGIN EVAL(R,T); TERPRIN END END ELSE          %P06108100
         SIMPLE2 ~ R                                                    06109000
      END OF SIMPLE2;                                                   06110000
REAL PROCEDURE SIMPLE(T); VALUE T; REAL T;                              06111000
      SIMPLE ~ SIMPLE2(AEX,T);                                          06112000
%  DECLARATION SECTION                                                  07000000
ALPHA PROCEDURE MKA(N,BLK); VALUE N,BLK; REAL N,BLK;                    07001000
      BEGIN LABEL L1,L2,L3,L4;                                          07002000
      SYMBOL S;                                                       %P07002500
      LABEL L5; REAL W;                                                 07003000
      REAL J,TN,K;                                                      07004000
      SYMBOL R;                                                         07005000
      IF PREFI THEN BEGIN                                               07006000
         STR ~ "N" & INSTR(0,N); N ~ N + 1 END ELSE                     07007000
      IF PREFX THEN BEGIN                                               07008000
          STR ~ "X" & INSTR(0,N);  N ~ N + 1 END ELSE                   07009000
      STR ~ INSTR(0,N);                                                 07010000
      PREFI ~ PREFX ~ FALSE;                                            07011000
      IF N > 6 THEN BEGIN                                               07012000
      K ~ N;                                                            07013000
      FOR J ~ N - 1 STEP  -1 UNTIL 1 DO                                 07014000
      IF STR(J,1) = VWL THEN BEGIN                                      07015000
         IF N ~ N - 1 = 6 THEN GO L1 END ELSE                           07016000
      STR(K~K-1,1) ~ STR(J,1);                                          07017000
      J ~ 1;                                                            07018000
  L1:  IF N } K THEN STR(J) ~ STR(K,5);                               %P07019000
      N ~ MIN(N,6);   END;                                              07020000
      TN ~ 6;                                                           07021000
   L2: IF J ~ CDRF(R ~ MKATOM(STR(0,N))) { 85 AND J > 0 THEN GO L3;     07022000
      MKA ~ W ~ REAL(STR(0,N));                                         07023000
      IF J = 0 THEN BEGIN  PLIST ~ R . PLIST;                           07024000
      CDR R~S ~ CONS; FORTF(S) ~ BLK; BLKF(S) ~ BLOCK;                %P07025000
          CLASSF(S) ~ FORTRANID;                                      %P07025100
      WH(CONS) ~ W; GO L4 END;                                          07026000
      IF J ~ (K~ WH(R~ATSM(J))).[3:8] ! 0 THEN BEGIN                    07027000
      IF J = 1 THEN GO L3;                                              07028000
      IF BLK = 1 THEN GO L3;                                            07029000
      IF J = BLK THEN GO L3 END;                                        07030000
      WH(R) ~ K & BLK [3:40:8] ;                                        07031000
      GO L4;                                                            07032000
   L3: IF N < 6 THEN BEGIN  STR(N,1) ~ "1"; N ~ N + 1;                  07033000
         GO L2 END;                                                     07034000
      IF TN = 6 THEN BEGIN TN ~ 5;                                      07035000
   L5:  STR(TN,1) ~  "2"; GO L2 END;                                    07036000
      IF STR(TN,1) < "9" THEN BEGIN                                     07037000
          STR(TN,1) ~ +"1"; GO L2 END;                                  07038000
      IF TN ~ TN - 1 ! 0 THEN GO L5;                                    07039000
      ERROR("NE");                                                      07040000
   L4:                                                                  07041000
      END OF MKA;                                                       07042000
PROCEDURE ENTRY(T,B); VALUE T,B; REAL T; BOOLEAN B;                     07043000
      BEGIN LABEL       EXIT,L1;                                        07044000
       ALPHA W;                                                         07045000
      REAL BLK,FORT,N;                                                  07046000
      BOOLEAN BV;                                                     %P07046500
      SYMBOL TR;                                                        07047000
      IF CLASS GTR IDMAX THEN IF NOT 66 LEQ CLASS LEQ 71 THEN %         07048000
      IF CLASS NEQ 58 THEN %                                            07048400
      BEGIN ERR(28); GO EXIT; END; %                                    07048500
      BLK ~ IF T}PROCID AND T { INTPROCID THEN 1 ELSE BLOCK;          %P07049000
      IF STRTOG THEN BEGIN STRTOG ~ FALSE; NEWSYM ~ MKATOM; TR ~ NIL;   07050000
             FORT ~ 0 END ELSE                                          07051000
      BEGIN NEWSYM ~ SYM; TR ~ INFO; FORT ~ WHC.[3:8] END;              07052000
      IF CLASS = FORM THEN BEGIN                                        07053000
      IF NOT SPECTOG THEN FLAG(36);                                     07054000
        %                                                             %P07055000
      WH(INF~INFO) ~ WHC ~ WHC & T[26:41:7] & 1 [25:47:1];              07056000
      END ELSE                                                          07057000
      BEGIN IF SPECTOG THEN FLAG(35);                                   07058000
      IF BV ~ BLK ! WHC.[11:7] THEN BEGIN                             %P07058500
      PLIST ~ NEWSYM . PLIST;                                           07059000
      CTR PLIST ~ TR;                                                   07060000
      CDR NEWSYM ~ INF ~ CONS; BLKF(INF) ~ BLK;                       %P07061000
        END ELSE TR ~ ATSM(1,INF~INFO);                               %P07061050
         FORTF(INF) ~ FORT; CLASSF(INF) ~ T;                          %P07061100
      END;                                                              07062000
       IF B THEN                                                      %P07063000
              IF CLASS = FORM THEN PRIN W ~ ALFOR(INF) ELSE           %P07063100
      BEGIN IF BV THEN TR ~ CONS;                                     %P07063200
      IF PREFI OR PREFX THEN                                            07064000
      IF INSTR(0,1) = AMONG "IJKLMN" THEN PREFI ~ FALSE ELSE            07065000
          PREFX ~ FALSE;                                                07066000
      IF (N ~ LENGTH(INSTR) { 6)AND NOT(PREFI OR PREFX) THEN BEGIN      07067000
      IF FORT ! BLK THEN                                              %P07067500
         IF FORT = 0 OR (FORT > 1 AND BLK > 1) THEN BEGIN               07068000
         FORTF(INF) ~ BLK;                                            %P07069000
        W ~ REAL(INSTR(0,N));  GO TO L1 END END;                        07070000
      W ~ MKA(N, BLK);                                                  07071000
   L1: PRIN W; WH(TR) ~ W;         END;                                 07072000
      STEPIT;                                                           07073000
   EXIT:                                                                07074000
      END OF ENTRY;                                                     07075000
PROCEDURE PROCEDUREDEC;                                                 07076000
      BEGIN RC RCT,DECLTO,DECLHO,STMTTO,STMTHO;                         07077000
      SYMBOL ST; REAL X;                                              %P07077100
      REAL BO,FO; %                                                   %U07077800
      LABEL EXIT; SYMBOL PLISTP,PLISTO;                                 07078000
      LABEL L1; SYMBOL P; REAL K,W,V,T;                                 07079000
      REAL BLOCKO,NDXO,N,PO;                                            07080000
      BOOLEAN FORWRD; %                                                 07080500
      REAL WHX; SYMBOL INFX; %                                          07080600
      REAL STNL;                                                        07081000
      SYMBOL S;                                                         07082000
      SYMBOL R1,R2,R3;                                                  07083000
      DOUBLE (PAGEFRMT,0,~,PO,PAGEFRMT); %                            %U07084000
      DOUBLE (BLNKFRMT,0,~,BO,BLNKFRMT); %                            %U07084500
      DOUBLE (FREEFRMT,0,~,FO,FREEFRMT); %                            %U07084800
      DECLTO ~ RCA[1,1];                                                07085000
      DECLHO ~ RCA[0,1];                                                07086000
      STMTTO ~ RCA[1,0];                                                07087000
      STMTHO ~ RCA[0,0];                                                07088000
      RCA[0,1] ~ RCA[0,0] ~ RCA[1,0] ~ RCA[1,1] ~ NIL;                  07089000
      NDXO ~ NDX;                                                       07090000
      BLOCKO ~ BLOCK; STNL ~ STN; STN ~ 0;                              07091000
      BLOCK ~ NEWBLOCK ~ NEWBLOCK + 1;   STARTBLOCK;                    07092000
      IF SPECTOG THEN BEGIN ERR(26); GO EXIT END;                       07093000
      IF T ~ GTA[J~J-1] = 0 THEN BEGIN    T ~ PROCID; J ~ J + 1 END     07094000
          ELSE BEGIN                                                    07095000
      IF T > ALFA THEN BEGIN FLAG(33); T ~ REALV END ELSE               07096000
      IF T = ALFA THEN T ~ INTV;                                        07097000
      IF GTA[J-1] = SAVEV THEN J := J - 1; %                            07097500
      T ~ T - 15; END;                                                  07098000
      CHKSOB;                                                           07099000
      RCX ~ 3; HEAD ~ TAIL ~ NIL;                                       07100000
IF T!PROCID THEN                                                      %U07100050
      IF T = 10 THEN PRIN #LOGICAL # ELSE                             %U07100100
IF T = 11 THEN PRIN #REAL #             ELSE PRIN #INTEGER #;         %U07100200
      IF T = PROCID THEN PRIN #SUBROUTINE # ELSE   PRIN #FUNCTION #;    07101000
      PREFI ~ T = 10 OR T = 12; PREFX ~ T = 11;                         07102000
      IF BOOLEAN(WHC.[2:1]) THEN BEGIN%                                 07102100
      PRIN ALFOR(INFO); %                                               07102250
      END; %                                                            07102500
      ENTRY(T,TRUE); PREFI ~ PREFX ~ FALSE;                             07103000
       CDR(INF) ~ S ~ ATSM(CONVAL(10) + 1);                           %P07104000
      PLISTO ~ PLIST; PLIST ~ NIL;                                      07105000
      INFX := INFO; WHX := WHC; %                                       07105500
      IF SYM = "(" THEN BEGIN                                           07106000
      FST ~ TRUE;                                                       07107000
      DO BEGIN COMMA;                                                   07108000
      STOPDEFINE := TRUE; %                                             07108100
       STEPIT;                                                        %P07108500
      ENTRY(FORM,TRUE); N ~ N + 1; END UNTIL SYM ! ",";                 07109000
      PRIN #)#; TERPRIN;                                                07110000
      IF TEST(")") THEN GO EXIT; PLISTP~ PLIST;                         07111000
       IF TEST(";") THEN GO EXIT;                                       07112000
      IF SYM = "VALUE" THEN BEGIN                                       07113000
      DO BEGIN STOPDEFINE := TRUE; STEPIT; %                            07114000
      IF CLASS ! FORM THEN BEGIN ERR(32); GO L1 END;                    07115000
      STOPDEFINE := TRUE; %                                             07115100
      WH(INFO) ~ WHC & 1 [24:47:1];        STEPIT END                   07116000
         UNTIL SYM ! ",";                                               07117000
      IF TEST(";") THEN GO EXIT END;                                    07118000
L1:   SPECTOG ~ TRUE; DECLARE END ELSE                                  07119000
      BEGIN  IF T ! PROCID THEN PRIN #(MARTIN)#;                        07120000
       TERPRIN; IF TEST(";") THEN GO EXIT END;                          07121000
      IF NOT FORWRD := SYM = "FORWARD" THEN BEGIN %                     07121500
      RCT ~ HEAD; RCX ~ 2;                                              07122000
      IF HEAD = NIL THEN HEAD ~ TAIL ~ RCT ELSE BEGIN                   07123000
         NEXTSUBR(TAIL) ~ RCT; TAIL ~ RCT END;                          07124000
      RCX ~ 0;                                                          07125000
      IF SYM = "BEGIN" THEN BEGIN BEGINEND := * + 1; STEPIT; DECLARE;   07126000
           COMPOUNDTAIL END ELSE STMT;                                  07127000
      END ELSE STEPIT; %                                                07127500
      SETSTN(0);                                                        07128000
      LMAX ~ MAX(CONVAL(10),LMAX);                                    %P07128100
      IF NOT FORWRD THEN BEGIN %                                        07128900
      DECLF(RCT) ~ RCA[0,1];                                            07129000
      BLOCKF(RCT) ~ BLOCK;                                              07130000
      STMTF(RCT) ~ RCA[0,0];                                            07131000
      END ELSE WH(INFX) := WH(INFX) & 1 [2:47:1]; %                     07131100
       IF N ! 0 THEN BEGIN                                            %P07132000
      NDX ~ NDXO + N;                                                   07133000
      K ~ N + 1;                                                        07134000
      FOR P IN PLISTP DO  BEGIN                                       %P07135000
         IF V ~ (W~ WH(ST ~ CDR P)).[26:7]} BOOID THEN                %P07135500
         TBL[NDXO + (K~K-1)] ~ (IF V = BOOID                          %P07136000
                THEN       1  ELSE                                      07137000
        IF V = REALID OR V = INTID THEN 0 ELSE 2) &                     07138000
          (IF V = REALID OR V = REALARRAYID THEN 2  ELSE 1)             07139000
               [18:33:15];                                            %P07140000
         END END;                                                     %P07140500
      K ~ NDX + 1;                                                      07141000
      FOR P ON PLIST DO BEGIN                                           07142000
      W ~ WH(R1 ~ CDR(R2 ~ CAR P)); W ~ W.[3:8];                      %P07143000
R3 ~ CTR P; CDR R2 ~ R3; V ~ SMTA(R3).[33:15];                        %P07143100
          IF V { 85 THEN BEGIN                                        %P07144000
      REMOB(R2);                                                        07145000
      IF W ! 0 THEN                                                     07146000
      TBLR ~ WH(ATSM(1,R1))& W [3:40:8]; END ELSE                       07147000
      BEGIN                                                             07148000
      IF W ! 0 THEN FORTF(R3) ~ W END END;                              07149000
      PLIST ~ PLISTO;                                                   07150000
       WH(S) ~ N;                                                     %P07150500
      FOR J ~ 1 STEP 1 UNTIL N DO                                       07151000
        WH(S~ATSM(1,S)) ~ TBL[NDXO+J];                                  07152000
      RECLAIM(S);                                                       07153000
      FOR J ~ K STEP 1 UNTIL NDX DO BEGIN                               07154000
      X ~ (V ~ TBL[J]).[12:36]; P ~ MKATOM(STRING(X));                %P07155000
       PLIST ~ P . PLIST;                                             %P07155100
      CDR P ~ CONS[WH:0 & FORTRANID[26:41:7] & V [3:3:8]];              07156000
      WH(CONS) ~ V.[12:36] END;                                         07157000
   EXIT:   ENDBLOCK(BLOCKO);                                            07158000
      BLOCK ~ BLOCKO; PAGEFRMT ~ PO;                                    07159000
      DOUBLE(BO,PO,~,BLNKFRMT,FREEFRMT); %                            %U07159500
      NDX ~ NDXO;                                                       07160000
      STN ~ STNL;                                                       07161000
      RCX ~ 1;                                                          07162000
      RCA[0,0] ~ STMTHO;                                                07163000
      RCA[0,1] ~ DECLHO;                                                07164000
      RCA[1,0] ~ STMTTO;                                                07165000
      RCA[1,1] ~ DECLTO;                                                07166000
      END OF PROCEDUREDEC;                                              07167000
BOOLEAN PROCEDURE BOUND;                                                07168000
      BEGIN LABEL EXIT;                                                 07169000
       LABEL LX;                                                      %P07169500
      BOOLEAN B; INTEGER I,J;                                           07170000
      BOOLEAN S; %                                                    %U07170500
      IF SYM = "+" OR B ~ SYM = "-" THEN STEPIT;                        07171000
        IF CHECK(FCONSTANT) THEN GO EXIT;                               07172000
      I ~ IF B THEN  -C ELSE C;                                         07173000
      STEPIT; IF S ~ SYM = ":" THEN BEGIN %                           %U07174000
      STEPIT; %                                                       %U07174500
      IF SYM = "+" OR B ~ SYM = "-" THEN STEPIT;                        07175000
      IF CHECK(FCONSTANT) THEN GO EXIT;                               %P07176000
      END ELSE BEGIN %                                                %U07176300
      C := I + 10; %                                                    07176400
      WARN(052); %                                                      07176500
      END; %                                                          %U07176600
      J ~ (IF B THEN  -C ELSE C) - I; J ~ ABS(J) + 1;                 %P07177000
      IF I ~ 1 - I < 0 THEN J ~ - J;                                  %P07178000
      G ~ CONS[WH: J & I [18:33:15]];                                   07179000
      IF S THEN STEPIT; %                                             %U07179100
      IF SYM ! "," THEN BEGIN BOUND ~ TRUE;                             07180000
           IF SYM = "]" THEN STEPIT ELSE ERR(31); END ELSE STEPIT;      07181000
       GO LX;                                                         %P07181500
   EXIT:  BOUND ~ TRUE;                                               %P07182000
   LX:                                                                %P07182500
      END OF BOUND;                                                     07183000
PROCEDURE ARRAYDEC;                                                     07184000
      BEGIN SYMBOL TS;                                                  07185000
      REAL X;                                                         %P07185100
      LABEL EXIT; SYMBOL P,R,S; LABEL L;                                07186000
      REAL T,N; ALPHA W;                                                07187000
      IF T ~ GTA[J~J-1] = 0 THEN BEGIN                                  07188000
         T ~ REALARRAYID; J ~ J + 1 END ELSE                            07189000
      BEGIN                                                             07190000
      IF T > ALFA THEN BEGIN  FLAG(32); T ~ REALV END  ELSE             07191000
      IF T = ALFA THEN T ~ INTV;                                        07192000
      T ~ T - 9; END;                                                   07193000
      CHKSOB;                                                           07194000
   L: FST ~ TRUE;                                                       07195000
      DO BEGIN                                                          07196000
      IF  FST THEN                                                      07197000
      IF T = BOOARRAYID THEN PRIN #LOGICAL # ELSE                     %U07197500
IF T=REALARRAYID THEN PRIN#REAL #             ELSE PRIN#INTEGER # ELSE%U07198000
      BEGIN PRIN #,#; STOPDEFINE ~ TRUE; STEPIT END;                    07199000
      ENTRY(T,TRUE);                                                    07200000
      IF FST THEN BEGIN  FST ~ FALSE;                                   07201000
          P ~ S ~ NEWSYM END ELSE  CDDR S ~ S ~ NEWSYM;                 07202000
      END UNTIL SYM ! ",";                                              07203000
      TERPRIN; S ~ CONS;                                                07204000
      IF TEST("[") THEN GO EXIT; N ~ 0;                                 07205000
      DO N ~ N + 1 UNTIL BOUND;                                         07206000
      WH(S) ~ N;                                                        07207000
      FST ~ TRUE;                                                       07208000
      WHILE NOT NULL P DO BEGIN                                         07209000
      IF FST THEN BEGIN FST ~ FALSE;                                    07210000
          PRIN #DIMENSION # END ELSE PRIN #,#;                          07211000
      R ~ CDR(P~ CDR P); CDR P ~ S;                                     07212000
      PRIN W ~ ALFOR(P); P ~ R; PRIN #(#;                               07213000
      FOR J ~ 1 STEP 1 UNTIL N DO BEGIN                                 07214000
      X ~ WH(ATSM(J,S)); X ~ X .[33:15]; PRIN X;                      %P07215000
      IF J = N THEN PRIN #)# ELSE PRIN #,# END END; TERPRIN;          %P07216000
      IF SYM = "," THEN BEGIN STOPDEFINE ~ TRUE; STEPIT; GO L END;      07217000
   EXIT:                                                                07218000
      END OF ARRAYDEC;                                                  07219000
PROCEDURE DEFINEDEC(B); VALUE B; BOOLEAN B;                             07220000
      BEGIN LABEL EXIT,L1,L2;                                           07221000
      STRING TC(1);                                                     07222000
      SYMBOL S; REAL LP,STE,N,J;                                        07223000
      IF SPECTOG THEN BEGIN ERR(26); GO EXIT END;                       07224000
      CHKSOB;                                                           07225000
   L2: ENTRY(DEFINEDID,FALSE);                                          07226000
      IF (B AND SYM ! "(") OR NOT(B OR SYM = "=") THEN BEGIN            07227000
             ERR(27); GO EXIT END;                                      07228000
      J ~ STE ~ N ~ 0; LP ~ 1;                                          07229000
      DO BEGIN                                                          07230000
      WHILE COL } RMARGI DO                                             07231000
          IF EOFTOG ~ INPRO THEN GO EXIT;                               07232000
      TC ~ CARD(COL,1);                                                 07233000
      IF STE = 3 THEN STE ~ 2 ELSE                                      07234000
      IF TC = AMONG ""(#) " THEN BEGIN                                  07235000
        IF TC = """ THEN STE ~ 3 ELSE                                   07236000
      IF TC = " " THEN BEGIN                                            07237000
          IF STE = 0 THEN STE ~ 1 ELSE                                  07238000
         IF STE = 1  THEN GO L1 END ELSE                                07239000
      IF B THEN BEGIN                                                   07240000
         IF TC = "(" THEN BEGIN                                         07241000
      IF STE < 2 THEN BEGIN STE ~ 0; LP ~ LP + 1 END END ELSE           07242000
      IF TC = ")" THEN BEGIN                                            07243000
         IF STE < 2 THEN STE ~ IF LP ~ LP ~ LP - 1 = 0 THEN 4 ELSE 0    07244000
         END END ELSE                                                   07245000
      IF TC = "#" THEN STE ~ 4 END ELSE                                 07246000
      IF STE = 1 THEN STE ~ 0;                                          07247000
      IF STE < 4 THEN BEGIN TCR(J,1) ~ TC; J ~ J + 1; N ~ N + 1 END;    07248000
      IF J = 8 OR STE = 4 THEN BEGIN                                    07249000
         J ~ 0; STRF(S ~ CONS) ~ TCR END;                               07250000
   L1: COL ~ COL + 1;                                                   07251000
      END UNTIL STE = 4;                                                07252000
      CDRF(INF) ~ N;                                                    07253000
         STEPIT;                                                        07254000
      IF SYM = "," THEN BEGIN STOPDEFINE ~ TRUE; STEPIT; GO L2 END;     07255000
   EXIT:                                                                07256000
      END OF DEFINEDEC;                                                 07257000
PROCEDURE VARDEC(T); VALUE T; REAL T ;                                  07258000
      BEGIN FST ~ TRUE; CHKSOB;                                         07259000
      IF T = BOOID THEN PRIN #LOGICAL # ELSE                          %U07259500
IF T=REALID THEN PRIN#REAL #             ELSE PRIN #INTEGER #;        %U07260000
      DO BEGIN                                                          07261000
      IF FST THEN FST ~ FALSE ELSE                                      07262000
        BEGIN STOPDEFINE ~ TRUE; STEPIT; PRIN #,# END;                  07263000
      ENTRY(T,TRUE);                                                    07264000
      END UNTIL SYM ! ",";                                              07265000
      TERPRIN;                                                          07266000
      END OF VARDEC;                                                    07267000
PROCEDURE CLEAR(N); REAL N;                                             07268000
      IF N ! 0 THEN BEGIN                                               07269000
      IF TAB GTR RMARG - 3 - N THEN TERPRI; %                           07270000
      CRD(TAB) ~ LIN2(0,N); TAB ~ TAB + N; N ~ 0 END;                 %P07271000
PROCEDURE NEXTCHAR;                                                     07272000
      WHILE COL } RMARGI DO EOFTOG ~ INPRO;                             07273000
PROCEDURE FORMATDEC(B); VALUE B; BOOLEAN B;                             07274000
      BEGIN LABEL EXIT;                                                 07275000
      DEFINE LINE = LIN2#;                                            %P07275500
      BOOLEAN X1;                                                     %P07275600
      BOOLEAN INC; LABEL LAX; %                                         07275700
      BOOLEAN ST; REAL STNL,N,T,R; LABEL L;                             07276000
      LABEL L1;                                                         07277000
      REAL LP;                                                          07278000
      IF SPECTOG THEN BEGIN ERR(26); GO EXIT END;                       07279000
      CHKSOB;                                                           07280000
      STNL ~ STN; STN ~ 0; RCX ~ 3;                                     07281000
      IF IOTOG THEN BEGIN %                                             07281100
      LINE(0,8) := FILL(LBN+1,8); %                                     07281200
      NEWSYM := SYM := MKATOM(LINE(0,8)); %                             07281300
      STRTOG := FALSE; SYM := NIL; WHC := CLASS := 0; %                 07281400
      END; %                                                            07281500
   L: HEAD ~ TAIL ~ NIL;                                                07282000
      ENTRY(FRMT,FALSE);                                                07283000
      IF SYM NEQ "(" AND SYM NEQ "<" THEN BEGIN ERR(30); GO EXIT; END;  07284000
      CDRF(INF) ~ STNO;                                                 07285000
      LP ~ 1; PRIN #FORMAT #;                                         %P07286000
      X1 ~ B;                                                         %P07287000
      BEGIN LINE ~ "("; N ~ 1 END;                                      07288000
      DO BEGIN                                                          07289000
      IF R ~ SCAN = 4 THEN GO EXIT;                                     07290000
      IF R = 0 THEN BEGIN LINE(N,1) ~ " "; N ~ N + 1 END ELSE           07291000
      IF R = 1 OR R = 2 THEN BEGIN                                      07292000
      IF X1 THEN BEGIN X1 ~ FALSE;                                    %P07292100
         CLEAR(N); LINE ~ "1X,"; N ~ 3 END;                           %P07292200
      IF R = 1 THEN                                                     07293000
      IF LENGTH(INSTR) > 1 THEN                                         07294000
      IF INSTR(0,1) = "X" THEN                                          07295000
      BEGIN    LINE(N) ~ INSTR(1,LENGTH(INSTR) - 1) & "X";              07296000
            GO L1 END;                                                  07297000
      LINE(N) ~ INSTR(0,LENGTH(INSTR));                                 07298000
   L1:  N ~ N + LENGTH(INSTR);                                          07299000
      END      ELSE                                                     07300000
      IF INSTR(0,1) = AMONG ""(<,/)>" THEN BEGIN %                      07301000
      T ~ REAL(INSTR(0,1));                                             07302000
      IF T = "<" THEN T := "(" ELSE IF T = ">" THEN T := ")"; %         07302050
      IF X1 THEN BEGIN X1 ~ FALSE;                                    %P07302100
        IF T ! ")" AND T ! "/" THEN BEGIN                             %P07302200
        CLEAR(N); LINE ~ "1X,"; N ~ REAL(T!",") + 2 END END;          %P07302300
      X1 ~ T = "/" AND B;                                             %P07302400
      IF T = """ THEN BEGIN                                             07303000
      CLEAR(N); %                                                       07303400
    LAX: %                                                              07303500
      NEXTCHAR; WHILE T := RMARG - TAB - 4 LEQ 0 DO TERPRI; %           07304000
      LINE := "H" & CARD(COL,1); N := 2; %                              07305000
      DO BEGIN COL ~ COL + 1; NEXTCHAR;                                 07306000
      LINE(N,1) ~      CARD(COL,1); N ~ N + 1;                          07307000
      END UNTIL CARD(COL,1) = """ OR INC := N GEQ T; %                  07308000
      IF NOT INC THEN COL := COL + 1; %                                 07309000
%                                                                       07310000
%                                                                       07311000
      CRD(TAB) := T : N-1; TAB := TAB + T; %                            07312000
      CRD(TAB) := LIN2(0,N); TAB := TAB + N; %                          07312500
      IF INC THEN BEGIN TERPRI; GO LAX; END; %                          07313000
%                                                                       07313100
      END ELSE %                                                        07313200
      BEGIN LINE(N,1) ~ INSTR(0,1); N ~ N + 1;                          07314000
      IF T = "," OR T = "/" THEN CLEAR(N) ELSE                          07315000
      IF T = "(" THEN LP ~ LP + 1 ELSE                                  07316000
      IF T = ")" THEN ST ~ LP ~ LP - 1 = 0 END END                      07317000
        ELSE                                                            07318000
      BEGIN                                                           %P07319000
      IF X1 THEN BEGIN X1 ~ FALSE; CLEAR(N); LINE~"1X,"; N ~ 3 END;   %P07319100
      LINE(N,1) ~ INSTR(0,1); N ~ N + 1 END;                          %P07319200
      END UNTIL  ST;                                                    07320000
      CLEAR(N); TERPRIN; CONTIN ~ FALSE;                                07321000
       ST ~ FALSE;                                                    %P07321500
      G ~ CONS[RCF:HEAD]; STEPIT;                                       07322000
      IF NOT IOTOG THEN %                                               07322500
      IF SYM = "," THEN BEGIN STOPDEFINE ~ TRUE; STEPIT;                07323000
          GO L END;                                                     07324000
      RCX ~ 1; STN ~ STNL;                                              07325000
   EXIT:                                                                07326000
      END OF FORMATDEC;                                                 07327000
PROCEDURE LABELDEC;                                                     07328000
      BEGIN LABEL L;                                                    07329000
      IF SPECTOG  THEN ERR(29) ELSE BEGIN                               07330000
      CHKSOB;                                                           07331000
   L: ENTRY(LABELID,FALSE);                                             07332000
      CDRF(INF) ~ STNO;                                                 07333000
      IF SYM = "," THEN BEGIN                                           07334000
         STOPDEFINE ~ TRUE; STEPIT; GO L END; END;                      07335000
      END OF LABELDEC;                                                  07336000
PROCEDURE SWITCHDEC;                                                    07337000
      BEGIN LABEL EXIT; REAL N;                                         07338000
      IF SPECTOG THEN ERR(26) ELSE BEGIN                                07339000
      CHKSOB; ENTRY(SWITCHID,FALSE); N ~ 0;                             07340000
      IF SYM ! "~" THEN BEGIN ERR(45); GO EXIT END;                     07341000
      DO BEGIN STEPIT;                                                  07342000
      IF CHECK(LABELID) THEN GO EXIT;                                 %P07343000
      G ~ CONS[WH:LABELNO(INFO)]; N ~ N + 1; STEPIT END                 07344000
      UNTIL SYM ! ",";                                                  07345000
      CDRF(INF) ~ N;   END;                                             07346000
   EXIT:                                                                07347000
      END OF SWITCHDEC;                                                 07348000
PROCEDURE FILEDEC(B); VALUE B; BOOLEAN B;                               07349000
      BEGIN OWN REAL FD,DT;            REAL FT;       LABEL DK; %     %U07350000
      IF SPECTOG THEN ERR(26) ELSE BEGIN                                07351000
      ENTRY(FILEID,FALSE);                                              07352000
      IF CLASS LEQ IDMAX THEN BEGIN %                                   07352100
      C := -1; %                                                        07352200
      IF SYM = "PRINT" THEN C := 6 ELSE %                               07352300
      IF SYM = "PUNCH" THEN C := 0 ELSE %                               07352300
      IF SYM = "REMOTE" THEN C := 19 ELSE %                             07352350
      IF SYM = "DISK" THEN C := 12; %                                   07352400
      IF C GEQ 0 THEN GO DK; %                                          07352500
      END; %                                                            07352600
      IF CLASS = FCONSTANT THEN BEGIN                                   07353000
      DK:IF C=00 THEN FT~5 + REAL(B) | 2 - REAL(U1108) | 6 | REAL(B) %BC07354000
     ELSE IF 15 { C { 18 OR C = 1 OR C = 4 OR C = 6 THEN FT ~ 6      %BC07354100
     ELSE IF C = 14 OR C = 19 THEN FT := 5 + REAL(B) %                  07354150
     ELSE IF 20 { C { 25 THEN FT := 7 - 6 | REAL(U1108) %               07354160
     ELSE BEGIN % DISK, ETC.                                            07354200
             DT := DT + 1; %                                            07354300
            FT ~ DT + 10;           % UNIT #"S (ETC.) START AT 11    %BC07354400
         END; %                                                       %U07354500
      END ELSE %                                                      %U07355000
%                                                                       07355500
      IF NOT B THEN %                                                 %U07356000
      BEGIN WHILE SYM ! "(" DO STEPIT;                                  07357000
      STEPIT; STEPIT; STEPIT;                                           07358000
      IF C = 10 THEN FT ~ 5; %                                        %U07359000
      END; %                                                          %U07359500
      ENDTOG ~ TRUE;                                                    07360000
%                                                                       07361000
      IF FT = 0 THEN BEGIN %                                          %U07361100
%                                                                       07361200
%                                                                       07361300
       FT := 10 + DT := DT + 1; %    UNKNOWN FILE TYPES START AT 11     07361400
      END; %                                                          %U07361500
       WHILE SYM NEQ ";" DO STEPIT; %                                   07361550
      UNITC[FILENO ~ FILENO + 1] ~ FT; %                              %U07361600
    CDRF(INF) ~ FILENO END;                                           %U07362000
      END OF FILEDEC;                                                   07363000
PROCEDURE DECLARE;                                                      07364000
BEGIN LABEL L,EXIT; REAL T;                                             07365000
   L: GTA[J~0] ~ 0; ERRFLAG ~ TRUE;                                     07366000
      IF NOT SPECTOG THEN RCX ~ 1;                                      07367000
      WHILE CLASS } BOOV AND CLASS { DEFINEV DO BEGIN                   07368000
         GTA[J~J+1] ~ CLASS; STOPDEFINE ~ TRUE; STEPIT END;             07369000
      IF J = 0 THEN GO EXIT;                                            07370000
      CASE GTA[J] - BOOV OD BEGIN                                       07371000
      VARDEC(BOOID);                                                    07372000
      VARDEC(REALID);                                                   07373000
      VARDEC(INTID);                                                    07374000
      VARDEC(INTID);                                                    07375000
      ERR(40);                                                          07376000
      ERR(41);                                                          07377000
      LABELDEC;                                                         07378000
      DEFINEDEC(TRUE);                                                  07379000
      IF T~GTA[J~J-1] = FILEV THEN FILEDEC(TRUE) ELSE                   07380000
      IF T = FORMATV THEN FORMATDEC(TRUE) ELSE ERR(42);                 07381000
      IF T ~ GTA[J~J-1] = FILEV THEN FILEDEC(FALSE) ELSE                07382000
      IF T = FORMATV THEN FORMATDEC(FALSE) ELSE ERR(43);                07383000
      SWITCHDEC;                                                        07384000
      PROCEDUREDEC;                                                     07385000
      ARRAYDEC;                                                         07386000
      FORMATDEC(FALSE);  % ASSUME "FORMAT IN" IF NOT SPECIFIED       %BC07387000
      FILEDEC  (FALSE);  % ASSUME READER (5) IF NOT "PUNCH-OUT"      %BC07388000
      DEFINEDEC(FALSE);                                                 07389000
           END;                                                         07390000
      IF SYM = ";" THEN BEGIN STEPIT; GO L END;                         07391000
      ERR(45);                                                          07392000
   EXIT:                                                                07393000
      IF SPECTOG THEN SPECTOG ~ FALSE ELSE RCX ~ 0;                     07394000
      END OF DECLARE;                                                   07395000
% STATEMENT SECTION                                                     08000000
PROCEDURE SWITCHGEN;                                                    08010000
      BEGIN LABEL EXIT; SYMBOL R; REAL J,N,T;                           08011000
      N ~ WHC.[33:15];                                                  08012000
      IF CLASS ! SWITCHID THEN  ERR(16) ELSE                            08013000
      BEGIN R ~ INFO; STEPIT; IF TEST("[") THEN GO EXIT;                08014000
        T ~ AEXP;  IF TEST("]") THEN GO EXIT;                           08015000
IF T.[35:3] > 2 THEN BEGIN ASSIGN(J~III,T,1); T~J END;                %I08015500
      PRIN #GO TO #;                                                    08016000
      FST ~ TRUE;                                                       08017000
      FOR J ~ 1 STEP 1 UNTIL N DO BEGIN  COMMA;                         08018000
      PRIN WH(R~ATSM(1,R)) END;                                         08019000
      PRIN #),#; EVAL(T,1); TERPRIN;                                    08020000
       END;                                                             08021000
   EXIT:                                                                08022000
      END OF SWITCHGEN;                                                 08023000
PROCEDURE GOSTMT;                                                       08024000
      BEGIN                                                           %P08024100
      STEPIT;                                                         %P08025000
      IF SYM = "TO" THEN STEPIT;                                        08026000
      IF CLASS=LABELID THEN BEGIN GENGO(CDRF(INFO)); STEPIT END ELSE  %P08027000
         SWITCHGEN                                                      08028000
      END OF GOSTMT;                                                    08029000
PROCEDURE DOSTMT;                                                       08030000
      BEGIN LABEL EXIT;                                                 08031000
      REAL A,B,BE; BOOLEAN N;                                           08032000
      IF STN = 0 THEN A ~ STN ~ STNO ELSE A ~ STN;                      08033000
      STEPIT; STMT; IF TEST("UNTIL") THEN GO EXIT; N ~ TRUE;            08034000
      FORTRANIF(BEXP,A,TRUE);                                         %U08035000
   EXIT:                                                                08039000
      END OF DOSTMT;                                                    08040000
PROCEDURE WHILESTMT;                                                    08041000
      BEGIN LABEL EXIT;                                                 08042000
      BOOLEAN N;                                                        08043000
      REAL A,B,BE,RT;                                                   08044000
      IF STN = 0 THEN STN ~ RT ~ STNO ELSE RT ~ STN;                    08045000
      STEPIT; FORTRANIF(BEXP,B~STNO,TRUE);                            %U08046000
      IF TEST("DO") THEN GO EXIT;                                     %U08049000
       STMT; GENGO(RT); SETSTN(B);                                      08050000
   EXIT:                                                                08051000
      END OF WHILESTMT;                                                 08052000
PROCEDURE REWINDIT(B); VALUE B; BOOLEAN B;                              08053000
      BEGIN LABEL EXIT; STRING FT(10); %                              %U08054000
      SYMBOL SYM1; %                                                    08054500
      SYM1 := SYM; %                                                    08054600
       STEPIT; IF TEST("(") THEN GO EXIT; IF CHECK(FILEID) THEN         08055000
                 GO EXIT;                                               08056000
      FT ~ " FILE"   & STRING (FILETYPE(INFO)) &       SPACE;         %U08057000
       STEPIT;                                                        %P08057500
      IF SYM = "[" THEN BEGIN STEPIT; STEPIT; STEPIT END;            %BC08057700
      IF SYM = "," THEN BEGIN STEPIT; %                                 08058000
      IF SYM = "*" THEN IF       SYM1 = "CLOSE" THEN SYM1 := "ENDFILE"; 08058400
      STEPIT; END; %                                                    08058600
        IF TEST(")") THEN GO EXIT;                                      08059000
      IF B5500 OR SYM1 = "ENDFILE" THEN %                               08059400
                    BEGIN PRIN SYM1,FT; TERPRIN; GO EXIT; END; %        08059500
      IF B THEN BEGIN  PRIN #ENDFILE # FT; TERPRIN END;                 08060000
      PRIN #REWIND # FT; TERPRIN;                                       08061000
   EXIT:                                                                08062000
      END OF REWINDIT;                                                  08063000
PROCEDURE IFSTMT(LB,TOP); VALUE LB,TOP;  REAL LB; BOOLEAN TOP;        %P08064000
      BEGIN REAL BE,A,B; BOOLEAN  NEG;                                  08065000
      BOOLEAN GOTO; LABEL EXIT;                                         08066000
      SAVER; STEPIT; NEG ~ TRUE;                                        08067000
      BE ~ BEXP;                                                      %U08068000
      %                                                               %U08069000
       IF TEST("THEN") THEN GO EXIT;                                    08070000
      IF GOTO ~ SYM = "GO" THEN BEGIN STEPIT;                           08071000
        IF SYM = "TO" THEN STEPIT;                                      08072000
        IF CLASS = LABELID THEN BEGIN                                   08073000
          A ~ LABELNO(INFO); STEPIT;                                    08074000
          IF SYM = "ELSE" THEN BEGIN STEPIT;                            08075000
            IF SYM = "GO" THEN BEGIN STEPIT;                            08076000
              IF SYM = "TO" THEN STEPIT;                                08077000
              IF CLASS = LABELID THEN BEGIN                             08078000
             EVBOO(BE);                                               %U08078500
                 PRNC(A,LABELNO(INFO),NEG); STEPIT END ELSE             08079000
      BEGIN FORTRANIF(BE,A,FALSE);                                    %U08080000
                          SWITCHGEN END                                 08081000
               END ELSE                                                 08082000
      BEGIN FORTRANIF(BE,A,FALSE);                                    %U08083000
            IF SYM = "IF" THEN IFSTMT(LB,TRUE) ELSE STMT              %P08084000
                END;                                                    08085000
      END ELSE FORTRANIF(BE,A,FALSE);                                 %U08086000
           GO EXIT END;                                                 08087000
      END;                                                              08088000
      FORTRANIF(BE,B~STNO,TRUE);                                      %U08089000
      IF GOTO THEN SWITCHGEN ELSE                                       08090000
      IF SYM = "IF" THEN IFSTMT(LB,FALSE) ELSE STMT;                    08091000
      IF SYM = "ELSE" THEN     BEGIN STEPIT;                            08092000
         GENGO(LB); SETSTN(B);                                        %P08093000
         IF SYM = "IF" THEN  IFSTMT(LB,FALSE)    ELSE STMT;             08094000
         END ELSE SETSTN(B);                                            08095000
      IF TOP THEN SETSTN(LB);                                           08096000
   EXIT: RESETER;                                                       08097000
      END OF IFSTMT;                                                    08098000
PROCEDURE FORSTMT;                                                      08099000
      BEGIN                                                             08100000
      REAL IIN,IIO,NDXO,IGT,YYO,R,STMTN,N,FB,E1,E2,E3,T,TST;            08101000
       LABEL LPR;                                                     %P08101500
          REAL NDXL;                                                    08102000
      REAL ARRAY RTN[0:14]; BOOLEAN STK,PS;                             08103000
      REAL TYPE;                                                        08104000
      BOOLEAN ST,UN; LABEL EXIT;                                        08105000
      IIN ~ II      ; NDXO ~ NDX;                                       08106000
      YYO ~ YY; IGT ~ III;                                              08107000
      STMTN ~ STNO; IIO ~ II;      N ~ FB ~ 0;                          08108000
      STEPIT;                                                           08109000
      IF CLASS = REALID THEN TYPE ~ 2 ELSE                              08110000
      IF CLASS = INTID THEN TYPE ~ 1 ELSE                               08111000
        BEGIN ERR(37); GO EXIT END;                                     08112000
      T ~ VAR; NDXL ~ NDX;                                              08113000
      IF SYM ! "~" THEN BEGIN ERR(56); GO EXIT END;                     08114000
      DO BEGIN STK ~ TRUE;                                              08115000
      STEPIT; E1 ~ AEXP;     N ~ N + 1;                                 08116000
      IF ST ~ SYM = "STEP" THEN BEGIN                                   08117000
       STEPIT; WARNTOG ~ TRUE; E2 ~ FIX(TYPE); WARNTOG ~ FALSE;       %P08118000
      IF SYM = "WHILE" OR UN ~ SYM = "UNTIL" THEN  STEPIT ELSE          08119000
         BEGIN ERR(38); GO EXIT END;                                    08120000
       WARNTOG ~ TRUE; E3 ~ IF UN THEN FIX(TYPE) ELSE BEXP;           %P08121000
       WARNTOG ~ FALSE;                                               %P08121500
      IF UN THEN                                                        08122000
      IF E2.[33:5] = 8 THEN BEGIN  STK ~ FALSE;                         08123000
      IF PS ~ R ~ TBV(E2) > 0 THEN BEGIN                                08124000
      IF ALLOWDOSTMT THEN                                             %U08124500
      IF TYPE = 1 AND N = 1 THEN                                        08125000
      IF SYM = "DO" THEN BEGIN                                          08126000
       IF E3.[33:5] = 8 THEN IF TBV(E3) < 0 THEN                      %P08126100
            BEGIN ASSIGN(FB~III,E3,1); E3 ~ FB END;                   %P08126200
      E1 ~ SIMPLE2(E1,1); PRIN #DO # STMTN;                             08127000
       DOLOOP(T,E1,E3,E2);                                            %P08128000
      TERPRIN; STEPIT; STMT; SETSTN(STMTN);                             08129000
      SETSTN(0); GO EXIT  END END END;                                  08130000
          END ELSE                                                    %P08131000
       IF WHL ~ SYM = "WHILE" THEN BEGIN STEPIT; SETSTN(RTN[N]~STNO); %P08131100
             E2 ~ BEXP END;                                           %P08131200
      IF FB ! 0 THEN SETSTN(FB);                                        08132000
       FB ~ STNO;                                                     %P08132500
      ASSIGN(T,E1,TYPE);                                                08133000
      IF ST THEN BEGIN                                                  08134000
        IF SYM = "," OR N ! 1 THEN ASSIGNL(IGT,N,1);                    08135000
      GENGO(TST~STNO);                                                  08136000
      SETSTN(RTN[N] ~ STNO);                                            08137000
      EVAL(T,TYPE); PRINEQ;   EVAL(T,TYPE);                             08138000
      PRIN IF R GTR 0 OR STK THEN # + (# ELSE # - (#; %                 08139000
      IF STK THEN EVAL(E2,TYPE) ELSE PRIN ABS(R); PRIN #)#; %           08140000
      TERPRIN; %                                                        08141000
      SETSTN(TST); PRINIF;                                              08142000
      IF UN THEN BEGIN                                                  08143000
      PRIN #(#; %                                                       08143500
      EVAL(T,TYPE);                                                     08144000
      IF STK OR PS THEN PRIN #.LE.# ELSE PRIN #.GE.#; %                 08145000
      EVAL(E3,TYPE);                                                    08146000
      IF STK THEN BEGIN PRIN #.AND.#; %                                 08147000
            EVAL(E2,TYPE); PRIN #.GT.0).OR.(#; %                      %F08148000
      EVAL(T,TYPE); PRIN #.GE.#; EVAL(E3,TYPE); PRIN #.AND.#;         %F08149000
            EVAL(E2,TYPE); PRIN #.LT.0# END; %                       %BC08150000
      PRIN #)#; %                                                       08150500
       END ELSE EVAL (E3,1);                                            08151000
   LPR:  PRIN #) #; PRN(STMTN,FB);                                    %U08152000
      END ELSE                                                          08153000
      IF WHL THEN BEGIN WARN(63); %                                     08153100
            PRINIF; EVAL(E2,1); GO LPR END ELSE                       %P08153200
      BEGIN                                                             08154000
      IF SYM = "," OR N ! 1 THEN ASSIGNL(IGT,N,1);                      08155000
      RTN[N] ~ FB;                                                      08156000
      IF SYM ! "DO" THEN GENGO(STMTN); END;                             08157000
      NDX := NDXL; %                                                    08158000
          END UNTIL SYM ! ",";                                          08159000
       IF TEST("DO") THEN GO EXIT; SETSTN(STMTN);                       08160000
           STMT;                                                        08161000
      IF N = 1 THEN GENGO(RTN[1]) ELSE   BEGIN                          08162000
      FST ~ TRUE; PRINGO;                                               08163000
      FOR T ~ 1 STEP 1 UNTIL N DO  BEGIN                                08164000
         COMMA; PRIN RTN[T] END; PRIN #), #;                          %P08165000
      EVAL(IGT,1);TERPRIN; END;                                         08166000
      SETSTN(FB);                                                       08167000
   EXIT:                                                                08168000
      II := IIO; YY := YYO; %                                           08168500
      END OF FORSTMT;                                                   08169000
PROCEDURE FILLSTMT;                                                     08170000
      BEGIN LABEL EXIT;                                                 08171000
      REAL Q,R,T,J,N,STNL; BOOLEAN DEC,QT; %                            08172000
      STEPIT; ROW~ TRUE;                                                08173000
      T ~ EXAMIN(PRIMER(FALSE,FALSE),FALSE);                          %P08174000
      IF ROWTOG THEN ROWTOG ~ FALSE ELSE                                08175000
      BEGIN ERR(20); GO EXIT END;                                       08176000
      IF SYM ! "WITH" THEN BEGIN ERR(21); GO EXIT END;                  08177000
      DO BEGIN QT := FALSE; STEPIT; %                                   08178000
      EVAL(ROWV,1); J := J + 1; PRIN # = # J; TERPRIN; %                08178400
      EVAL2(T); PRIN # = #; %                                           08178500
      IF CLASS ! FCONSTANT THEN IF CLASS ! RCONSTANT THEN BEGIN %       08179000
      IF QT := CLASS = QUOTESIGN THEN BEGIN %                           08179100
      LINE := TBL(HOL|8,8); PRIN LINE(0,8); NDX := NDX - 1; %           08179200
      END ELSE IF CLASS LEQ IDMAX THEN BEGIN %                          08179300
      STR  := R : SYM; %                                                08179400
      IF NOT 3 LSS R LEQ 19 THEN FLAG(22) ELSE %                        08179500
      IF STR (0,3) NEQ "OCT" THEN FLAG(22) ELSE BEGIN %                 08179600
      C := 0; FOR N := 3 STEP 1 UNTIL R DO BEGIN %                      08179700
        C := (Q := REAL(STR (N,1)))& C [3:6:42] ; %                     08179750
        DEC := DEC OR Q GTR 7; %                                        08179751
      END; %                                                            08179753
      IF DEC THEN DEC := FALSE ELSE N := R := 0; %                      08179755
      IF R = 19 THEN C := C & (N := REAL(STR (3,1))) [1:46:2]; %        08179760
      IF N GTR 3 OR REAL(NOT BOOLEAN(ABS(C)) AND NOT BOOLEAN(IMAX)) %   08179780
          NEQ REAL(NOT FALSE) THEN WARN(22); CLASS := FCONSTANT; %      08179785
      END; %                                                            08179800
      END ELSE %                                                        08179850
      FLAG(22); END; %                                                  08179900
      IF NOT QT THEN BEGIN PRIN C; STEPIT; END; TERPRIN; %              08180000
      END UNTIL SYM ! ",";                                              08181000
   EXIT: ROW ~ FALSE;                                                   08198000
      END OF FILLSTMT;                                                  08199000
REAL PROCEDURE MAKEFORMAT;                                              08200000
      BEGIN  RC T;                                                      08201000
      REAL R,STNL;                                                      08202000
      MAKEFORMAT ~ R ~ WHC.[33:15];                                     08203000
      IF (WHC ~ WH(INFO~ATSM(1,INFO))).[18:15] ! BLOCK THEN BEGIN       08204000
        STNL ~ STN; STN ~ R;                                            08205000
        WH(INFO) ~ WHC & BLOCK [18:33:15];                              08206000
         T ~ RCF(INFO);  FORMTOG ~ TRUE;                                08207000
      WHILE T ! NIL DO BEGIN                                            08208000
      CRD ~ FORCARD(T); OUTPRO; T ~ NEXT(T) END;                        08209000
         STN ~ STNL; FORMTOG ~ FALSE; END;                              08210000
       STEPIT;                                                          08211000
      END OF MAKEFORMAT;                                                08212000
PROCEDURE IOSTMT(TYPE); VALUE TYPE  ; BOOLEAN TYPE;                     08213000
      BEGIN LABEL EXIT,RP;                                              08214000
      LABEL LP;                                                       %P08214500
      BOOLEAN EDIT,SPAC,REV; INTEGER T,U,T1,F1,F2,T3,SN,T2; %           08214600
      BOOLEAN BK,FF,NC; %                                             %U08214800
      BOOLEAN FR,CC;                                                    08215000
      REAL FRP,LG; %                                                  %U08216000
      STRING FT(7); %                                                   08216500
      REAL ENDLB,ERRLB; %                                             %U08216500
      SPAC := SYM = "SPACE"; %                                          08216600
      STEPIT; IF REV := SYM = "REVERSE" THEN STEPIT; %                  08217000
      IF TEST("(") THEN GO EXIT; %                                      08217050
      IF EDIT :=BOOARRAYID LEQ CLASS LEQ INTARRAYID AND U1108 THEN BEGIN08217100
      ROW := TRUE; REV := SPAC := FALSE; %                              08217200
      T := EXAMIN(PRIMER(FALSE,FALSE),FALSE); %                         08217300
      IF ROWTOG THEN ROWTOG := FALSE ELSE BEGIN ERR(20); GO EXIT; END;  08217400
      END ELSE BEGIN %                                                  08217900
              IF CHECK(FILEID) THEN GO EXIT;                            08218000
      FT ~ " FILE"   & STRING (FILETYPE(INFO)) &      SPACE;          %I08219000
      STEPIT; %                                                       %U08219500
      IF SYM = "[" THEN BEGIN                                           08220000
             STEPIT; CC ~ SYM = "PAGE"; STEPIT;                         08221000
      IF TEST("]") THEN GO EXIT;                                      %P08222000
      IF SYM = ")" THEN BEGIN STEPIT; GO LP END END;                  %P08222500
      END;%                                                             08222600
      IF BK ~ SYM ! "," THEN GO RP ELSE STEPIT; %                     %U08223000
      %                                                               %P08224000
      IF FR ~ CLASS = FRMT THEN  FRP ~ MAKEFORMAT ELSE                  08225000
      IF (BK:=SYM="*") OR FF:=SYM="/" OR SYM="[" THEN %                 08226000
           DO STEPIT UNTIL SYM = "," OR SYM = ")" ELSE %              %U08226500
      IF FR := SYM = "<" THEN BEGIN %                                   08226600
      IOTOG := TRUE; FORMATDEC(NOT TYPE AND TRUE); IOTOG := FALSE; %    08226700
      FRP := MAKEFORMAT; END ELSE %                                     08226800
      BEGIN RSIZETOG ~ TRUE; RSIZE      ~ SIMPLE(1);                    08227000
         END;                                                           08228000
      IF SYM ! "," THEN GO RP;                                          08229000
      STEPIT;                                                         %P08229500
      LG ~ LISTGEN(FALSE);                                              08230000
   RP: IF TEST(")") THEN GO EXIT;                                       08231000
      IF SYM = "[" THEN BEGIN STEPIT; %                               %U08231100
        IF CHECK(LABELID) THEN GO EXIT; ENDLB ~ WHC.[33:15]; %        %U08231200
        STEPIT; IF SYM= ":" THEN BEGIN STEPIT; %                      %U08231300
      IF CHECK(LABELID) THEN GO EXIT; %                                 08231400
        ERRLB := WHC.[33:15]; STEPIT; END; %                            08231500
      IF TEST("]") THEN GO EXIT END; %                                %U08231600
      T2 := STN; %                                                      08231705
      IF SPAC THEN BEGIN            STN := 0; REV := TRUE; %            08231710
      ASSIGN(F1:=III,RSIZE,1); EVAL(F2:=III,1); PRINEQ; PRIN #IABS(#; % 08231720
      EVAL(F1,1); PRIN #)#; TERPRIN; SN := STNO; T3 := STNO; %          08231730
      PRIN #IF(#; EVAL(F1,1); PRIN #.EQ.0) GO TO # T3; TERPRIN; %       08231730
      PRIN #DO # SN; DOLOOP(III,ONE,F2,ONE); TERPRIN; %                 08231770
      END; %                                                            08231790
      IF REV THEN BEGIN STN := 0; %                                     08231810
      PRIN #BACKSPACE# FT; TERPRIN; END; %                              08231830
      IF NOT EDIT THEN BEGIN %                                          08231900
      IF TYPE THEN PRIN #READ# ELSE PRIN #WRITE#;                       08232000
      PRIN #(# FT;                                                      08233000
      END; %                                                            08233300
      IF BK AND (B5500 AND NOT EDIT) THEN BK := FALSE; %                08233400
      IF BK THEN BEGIN %                                              %U08233500
      IF BK ~ BLNKFRMT = 0 THEN BLNKFRMT ~ STNO; %                    %U08233510
      FR ~ TRUE; %                                                    %U08233520
      FRP ~ BLNKFRMT; %                                               %U08233530
      END ELSE %                                                      %U08233540
      IF FF THEN BEGIN %                                              %U08233550
      IF FR ~ U1108 THEN IF FF ~ FREEFRMT = 0 THEN FREEFRMT ~ STNO %  %U08233560
      ELSE IF B5500 THEN PRIN #,/#; %                                 %U08233570
      FRP ~ FREEFRMT; %                                               %U08233580
      END; %                                                          %U08233590
      IF EDIT THEN BEGIN %                                              08233600
      EVAL(ROWV,1); PRIN # = 1#; TERPRIN; %                             08233640
          PRIN IF TYPE THEN #DE# ELSE #EN#; PRIN #CODE(#; %             08233650
      IF FR THEN PRIN FRP #,#; EVAL2(T); PRIN #)#; %                    08233700
      END ELSE BEGIN %                                                  08233900
      IF FR THEN PRIN #,# FRP; %                                      %U08234000
      IF ENDLB+ ERRLB ! 0 THEN BEGIN %                                %U08234100
         IF ERRLB!0 THEN   PRIN   #, ERR = # ERRLB; %                 %U08234200
         PRIN #, END = # ENDLB END; PRIN #)#; %                       %U08234300
      END;%                                                             08234400
       PRIN SPACE;                                                    %P08234500
      EVLIST(LG); TERPRIN;                                              08235000
   LP: %                                                                08235005
      IF REV THEN BEGIN %                                               08235010
      IF SPAC THEN BEGIN PRIN #IF(#; EVAL(F1,1); PRIN #.LT.0)#; END; %  08235015
      PRIN #BACKSPACE# FT; TERPRIN; END; %                              08235020
      IF SPAC THEN BEGIN %                                              08235025
      STN := SN; PRIN #CONTINUE#; TERPRIN; %                            08235030
      STN := T3; PRIN #CONTINUE#; TERPRIN; %                            08235035
      END; %                                                            08235040
      IF REV THEN IF T2 NEQ 0 THEN BEGIN %                              08235045
      STN := T2; PRIN #CONTINUE#; TERPRIN; STN := 0; %                  08235050
      END; %                                                            08235060
%                                                                       08235500
      IF CC THEN BEGIN                                                  08236000
      BEGIN %                                                         %U08236500
      IF PAGEFRMT = 0 THEN BEGIN SETSTN(PAGEFRMT ~ STNO);               08237000
        PRIN #FORMAT (1H1)#; TERPRIN END;                             %P08238000
      PRIN #WRITE (# FT #,# PAGEFRMT #)#; TERPRIN END;                  08239000
      END ELSE %                                                      %U08239100
      IF BK THEN BEGIN %                                              %U08239150
      SETSTN (BLNKFRMT); %                                            %U08239200
      T := IF S360 THEN 4 ELSE 6; %                                     08239240
      PRIN #FORMAT (1023A#T#)#; %                                       08239250
      TERPRIN; %                                                      %U08239300
      END ELSE %                                                      %U08239350
      IF FF AND U1108 THEN BEGIN %                                    %U08239400
      SETSTN (FREEFRMT); %                                            %U08239450
      PRIN #FORMAT ( )#; %                                            %U08239500
      TERPRIN; %                                                      %U08239550
      END; %                                                          %U08239600
   EXIT:                                                                08240000
      RSIZETOG ~ FALSE;                                               %P08240500
      END OF IOSTMT;                                                    08241000
PROCEDURE COMPOUNDTAIL;                                                 08242000
      BEGIN                                                             08243000
      LABEL L;  L: STMT;                                              %P08244000
      WHILE SYM ! ";" AND SYM ! "END" AND NOT EOFTOG DO               %P08244100
          BEGIN ERRFLAG ~ TRUE; ERR( 99) END;                         %P08244200
      IF SYM = ";" THEN BEGIN STEPIT; GO L END;                       %P08244300
      IF SYM = "END" THEN BEGIN ENDTOG ~ TRUE;                          08245000
                   BEGINEND := * - 1; %                                 08245500
                  STEPIT END ELSE ERR(25);                              08246000
      END OF COMPOUNDTAIL;                                              08247000
PROCEDURE STMT;                                                         08248000
      BEGIN LABEL EXIT; BOOLEAN PR; REAL T;                             08249000
      SAVER;                                                            08250000
      WHILE CLASS = LABELID DO BEGIN                                    08251000
          SETSTN(LABELNO(INFO)); STEPIT;                                08252000
       IF TEST(":") THEN GO EXIT END;                                   08253000
      ERRFLAG ~ TRUE; % ALLOW ERROR MESSAGES                            08254000
      IF CLASS  } READV THEN BEGIN                                      08255000
        IF CLASS > BEGINV THEN BEGIN  ERR(4); GO EXIT END;              08256000
      CASE CLASS - READV OF BEGIN                                       08257000
      IOSTMT(TRUE); % READ                                              08258000
      IOSTMT(FALSE); % WRITE                                            08259000
      REWINDIT(TRUE);  %                                                08260000
      REWINDIT(FALSE);  %                                               08261000
      FORSTMT;                                                          08262000
      WHILESTMT;                                                        08263000
      DOSTMT;                                                           08264000
      FILLSTMT;                                                         08265000
      ;  % ;                                                            08266000
      ;  % UNTIL                                                        08267000
      ;  % END                                                          08268000
      ;  % ELSE                                                         08269000
      IFSTMT(STNO,TRUE);  % IF                                        %P08270000
      GOSTMT; % GO                                                      08271000
      BEGIN BEGINEND := * + 1; STEPIT; COMPOUNDTAIL; % BEGIN            08272000
      END END END ELSE %                                                08273000
      IF CLASS } PROCID AND CLASS { INTARRAYID THEN BEGIN               08274000
         PR ~ CLASS = PROCID;                                           08275000
      T ~ EXAMIN(PRIMER(TRUE,FALSE),FALSE);                             08276000
      IF ROWTOG THEN ROWTOG ~ FALSE;                                    08277000
      IF PR THEN PRIN #CALL #;                                          08278000
      IF T.[35:3] > 4 OR PR THEN                                      %P08278500
      EVAL2(T); TERPRIN END                                           %P08279000
         ELSE                                                         %P08280000
       IF CLASS } BOOV AND CLASS { DEFINEV THEN BEGIN                 %P08280100
          FLAG(90); DECLARE; STMT END ELSE                            %P08280200
         ERR(IF CLASS = 0 THEN 100 ELSE 4);                           %P08280300
      RESETER;                                                          08281000
   EXIT:                                                                08282000
      END OF STMT;                                                      08283000
%  INPUT-OUTPUT SECTION                                                 09000000
PROCEDURE OUTPRO2;                                                      09001000
      BEGIN                                                             09002000
      LINE (72,8) ~+"00001000";                                         09003000
      IF FREE THEN %                                                    09003500
      IF LINE(0,5) = "     "  THEN LINE(0,72) := LINE(5,67) & SPACE ELSE09003600
      IF LINE(0,2) = "C-" THEN LINE(2,70) := LINE(6,66) & SPACE; %      09003700
      WRITE(OUTFILE,15,LINE);                                           09004000
      IF NOT B5500 THEN %                                               09004050
       IF PUNCHTOG OR FORTOG THEN      LINE(0,72) ~ SUBST(LINE(0,72), %P09004100
      "[":"(", "]":")", "%":"=", "@":"}", "|":"*",                   %BC09004200
      """:"@", "(":"%", ")":"[", "=":"#", "+": "&");                  %P09004400
      IF PUNCHTOG THEN WRITE(PNCH,10,LINE);                             09005000
IF FORTOG THEN WRITE(FORTAPE,12,LINE);                                %U09005500
      END OF OUTPRO2;                                                   09006000
PROCEDURE OUTPRO;                                                       09007000
      BEGIN RC T;                                                       09008000
      IF NOT FORMTOG THEN BEGIN                                         09009000
         CRD(72,8) ~ ALGOLSEQ;                                          09010000
      IF CONTIN OR COMM THEN BEGIN      CONTIN ~ FALSE;                 09011000
      IF CON = 0 THEN CRD(5,1) ~ " " ELSE                               09012000
      BEGIN CRD(5,1) := "-"; CON := 0; END END ELSE %                   09013000
       IF CON ~ CON + 1 = 1 THEN CRD(5,1) ~ " " ELSE                  %P09014000
      CRD(5,1) := "-"; END; %                                           09014100
      CRD(0,5) ~ SPACE;                                                 09015000
      IF STN ! 0 THEN BEGIN                                             09016000
      STR(0,5) ~ J: STN;                                              %P09017000
      CRD(5-J,J) ~ STR(0,J);                                          %P09018000
         STN ~ 0 END ELSE                                               09019000
      IF COMM THEN CRD(0,2) := "C-"; %                                  09020000
      T ~ RC;                                                           09021000
      FORCARD(T) ~ CRD;                                                 09022000
      IF HEAD = NIL THEN HEAD ~ TAIL ~ T ELSE                           09023000
      BEGIN NEXT(TAIL) ~ T; TAIL ~ T END;                               09024000
      END OF OUTPRO;                                                    09025000
BOOLEAN PROCEDURE INPRO;                                                09026000
      BEGIN LABEL EXIT,EOF,TAPEOF,LR,LT,LP;                             09027000
      REAL T,N,J,K,STE;                                                 09028000
      SYMBOL S;                                                         09029000
      LABEL L1,L2;                                                      09030000
      COL ~ LMARGI ~ 0;                                               %P09030100
   L1: IF DFX = 0 THEN GO LR;                                           09031000
      IF DFX = 1 THEN BEGIN  DFX ~ 0; CARD ~ TCARD; RMARGI ~ 72;        09032000
      IF LMARGI ~ COL ~ DFR[1] } 72 THEN BEGIN COL ~ LMARGI ~ 0;      %P09033000
                   GO LR END; GO EXIT END;                            %P09033100
      IF N ~ (T~DFR[DFX]).[3:15] = 0 THEN BEGIN                         09034000
          DFX ~ DFX - 1; GO L1 END;                                     09035000
      J ~ T.[18:15]; STE ~ K ~ 0;                                       09036000
      TCR ~ STRF(S~ATSM(T));                                            09037000
      DO BEGIN                                                          09038000
      IF STE = 3 THEN STE ~ 1 ELSE                                      09039000
      IF TCR(J,1) = LTR THEN BEGIN                                      09040000
        IF STE = 0 THEN STE ~ 2 END ELSE                                09041000
      IF TCR(J,1) = """ THEN BEGIN                                      09042000
         IF STE = 0 THEN STE ~ 3 ELSE                                   09043000
         IF STE = 1 THEN STE ~ 0 END ELSE                               09044000
      IF TCR(J,1) ! ALF THEN BEGIN                                      09045000
         IF STE = 2 THEN STE ~ 4 END;                                   09046000
      IF STE ! 4 THEN BEGIN                                             09047000
      IF K LSS 2048 THEN CARD(K,1) := TCR(J,1); %                       09048000
       N ~ N - 1; K ~ K + 1; J ~ J + 1  END;                            09049000
      IF N = 0 THEN GO L2;                                              09050000
      IF J = 8 THEN BEGIN J ~ 0;                                        09051000
          TCR ~ STRF(S~ATSM(1,S));  END;                                09052000
      END UNTIL STE = 4;                                                09053000
   L2: IF N = 0 THEN DFX ~ DFX - 1 ELSE                                 09054000
      DFR[DFX] ~ SMTA(S) & J[18:33:15] & N [3:33:15];                   09055000
      COL := 0; RMARGI := K; %                                          09056000
      GO EXIT;                                                          09057000
   LR: IF TAPETOG THEN BEGIN                                            09058000
      IF CARDLAST THEN READ(INFILE,10,CARDIN)[EOF] ELSE                 09059000
          READ(TAPE,10,TAPEIN)[TAPEOF];                                 09060000
      IF CARDIN(72,8) = TAPEIN(72,8) THEN BEGIN                       %P09061000
      READ(TAPE,10,TAPEIN)[TAPEOF]; GO LT END;                        %P09062000
      IF CARDIN(72,8) > TAPEIN(72,8) THEN BEGIN                       %P09063000
       CARD ~ TAPEIN; CARDLAST ~ FALSE; END ELSE                      %P09064000
       BEGIN LT: CARD ~ CARDIN; CARDLAST ~ TRUE; END END ELSE         %P09065000
      READ(INFILE,10,CARD)[EOF];                                        09066000
   LP:     IF TAPETOG THEN IF CARDLAST THEN LINE(116) ~ "C" ELSE        09067000
            LINE(116) ~ "T";                                            09068000
       IF SEQTOG THEN BEGIN NEWSEQ ~ +"00001000";                     %P09068100
            CARD(72,8) ~ NEWSEQ END;                                  %P09068200
      ALGOLSEQ := CARD(72,8); %                                         09068500
      LINE(16) ~ CARD(0,72) & 8 * &  CARD(72,8);                        09069000
      LINE := FILL(ERRORCOUNT,4) & FILL(BEGINEND,4) & FILL(BLOCK,4);    09069050
      IF NEWTAPETOG THEN                                              %P09069100
         IF CARD(0,1) ! "$" THEN WRITE(NEWTAPE,10,CARD);              %P09069200
      IF LISTOG THEN WRITE(OUTFILE,15,LINE);   GO EXIT;                 09070000
   TAPEOF:  TAPETOG ~ FALSE; CARD ~ CARDIN;                             09071000
              CARDLAST ~ TRUE; GO LP;                                   09072000
   EOF: EOFTOG ~ INPRO ~ TRUE;                                          09073000
   EXIT:                                                                09074000
      END OF INPRO;                                                     09075000
PROCEDURE STEPIT;                                                       09076000
      BEGIN                                                             09077000
      LABEL EXIT,L1,L2,L3;                                              09078000
      LABEL  LF,LN,LA,LS;                                               09079000
      SWITCH SW~LF,LN,LN,LA,LS;                                         09080000
      LABEL      LC,LL,LP,LD;                                           09081000
      SWITCH WS~ LC,LL,LP,LD;                                           09082000
      REAL R,N,STNL;                                                    09083000
      INTEGER J;                                                        09084000
      INFO ~ NIL; WHC ~ 0;                                            %P09084500
      IF EOFTOG THEN BEGIN                                              09085000
   LF: SYM ~ "END"; CLASS ~ 50; GO EXIT END;                            09086000
      STRTOG ~ FALSE;                                                   09087000
      IF ENDTOG THEN                                                    09088000
      WHILE TRUE DO BEGIN                                               09089000
      IF R ~ READCON(FALSE) = 0 THEN GO LF;                             09090000
      IF R = 3 THEN                                                     09091000
      IF SYM ~ INSYM = "." OR                                           09092000
         (CLASS ~ CDRF(SYM) } 49 AND CLASS { 52) THEN                   09093000
          BEGIN ENDTOG ~ FALSE; GO EXIT END END;                        09094000
   L1: STRTOG ~ FALSE;                                                  09095000
      R ~ READCON(FALSE);                                               09096000
   L3: GO TO SW[R+1];                                                   09097000
   LN: SYM ~ NIL;                                                       09098000
      CLASS ~ RCONSTANT;                                                09099000
      IF ABS(C := INREAL) LEQ IMAX THEN %                               09100000
      IF C = J ~ C THEN BEGIN C ~ J; CLASS ~ FCONSTANT END;             09101000
      GO EXIT;                                                          09102000
   LS: STRTOG ~ TRUE; SYM ~ NIL;                                        09103000
      CLASS ~ 0; GO EXIT;                                               09104000
   LA: IF CLASS ~ CDRF(SYM~INSYM) { 85 THEN BEGIN                       09105000
         IF CLASS } 82 THEN GO WS[CLASS-81] ELSE GO EXIT END;           09106000
      IF CLASS ~ (WHC~WH(INFO~ATSM(CLASS))).[26:7]= DEFINEDID           09107000
         AND NOT STOPDEFINE THEN BEGIN                                  09108000
      IF DFX = 0 THEN BEGIN                                             09109000
         DFR[DFX:=1] := COL; TCARD := CARD(0,80); END; %                09110000
      DFR[DFX ~ DFX + 1] ~ SMTA(ATSM(1,INFO)) & 0[18:33:15] &         %P09111000
                 WHC [3:33:15];                                       %P09111500
      COL ~ RMARGI; GO L1 END;                                          09112000
      GO EXIT;                                                          09113000
   LC: % COMMENT                                                        09114000
      COMM ~ TRUE; STNL ~ STN;  STN ~ 0;                                09115000
      WHILE TRUE DO                                                     09116000
      IF R ~ SCAN = 0 THEN PRIN SPACE ELSE                              09117000
      IF R = 4 THEN GO L2 ELSE                                          09118000
      BEGIN                                                             09119000
      IF R = 3 AND N ~ LENGTH(INSTR) = 1 THEN                           09120000
      IF INSTR(0,1) = ";" THEN BEGIN                                    09121000
   L2: TERPRI; COMM~ FALSE; STN ~ STNL; GO L1 END;                      09122000
      IF TAB + N > 71 THEN  TERPRI;                                     09123000
      CRD(TAB,N) ~ INSTR(0,N);                                          09124000
      TAB ~ TAB + N;  END;                                              09125000
   LL: WHILE COL } RMARGI DO                                            09126000
      IF EOFTOG ~ INPRO THEN  GO LF;                                    09127000
      IF CARD(COL,1) = " " THEN BEGIN COL ~ COL + 1; GO LL END;         09128000
      IF CARD(COL,1) = "=" THEN BEGIN COL ~ COL + 1; SYM ~ "~" END;     09129000
      GO EXIT;                                                          09130000
   LP: COL ~ RMARGI; GO L1;                                             09131000
   LD: IF R ~ READCON(FALSE) < 3 THEN GO L3;                            09132000
      IF N ~ LENGTH(INSTR) < 3 THEN GO L3; %                          %U09133000
      IF N ~ REAL(INSTR(0,MIN(7,N))) = "PNCH" THEN BEGIN PUNCHTOG~TRUE; 09134000
         GO LD END;                                                     09135000
      IF N = "PUNCH" THEN BEGIN PUNCHTOG := TRUE; GO LD; END; %         09135400
      IF N = "CARD" THEN BEGIN TAPETOG ~ FALSE; GO LD END; %          %U09135500
      IF N = "TAPE" THEN BEGIN TAPETOG ~ TRUE;                          09136000
          READ(INFILE,10,CARDIN);  GO LD END;                           09137000
      IF N = "COMMON" THEN BEGIN INSTR(0,6) := "ZZZZZZ"; %              09137100
         IF R := READCON(FALSE) LSS 3 THEN GO L3; %                     09137200
         COMNAME := REAL(INSTR(0,6)); %                                 09137300
         GO LD; END; %                                                  09137400
      IF N = "NAME" THEN BEGIN INSTR(0,6) ~ "XXXXXX"; %               %U09138000
      IF R ~ READCON(FALSE) < 3 THEN GO L3;                             09139000
PROGNAME ~ REAL(INSTR(0,6)); %                                        %U09140000
GO LD END; %                                                          %U09140050
      IF N = "LIST" THEN BEGIN LISTOG ~ TRUE; GO LD END;                09141000
      IF N = "NWTP" THEN BEGIN NEWTAPETOG ~ TRUE; GO LD END;          %P09141500
      IF N = "NEW" THEN BEGIN NEWTAPETOG := TRUE; GO LD; END; %         09141550
       IF N = "SEQN" THEN BEGIN SEQTOG ~ TRUE; NEWSEQ ~ NIL;GO LD END;%P09141600
      IF N = "SEQ" THEN BEGIN SEQTOG := TRUE; NEWSEQ := NIL;GO LD;END;  09141650
       IF N = "FRTP" THEN BEGIN FORTOG ~ TRUE; GO LD END;             %P09141700
      IF N = "NODO" THEN BEGIN ALLOWDOSTMT ~ FALSE; GO LD END;        %U09141800
      IF N = "CCCC" THEN BEGIN JCLTOG := U1108; GO LD; END; %           09141900
      IF N = "B5500"THEN BEGIN B5500~TRUE; IMAX:=549755813887;GO LD;END;09141930
      IF N = "B5700"THEN BEGIN B5500~TRUE; IMAX:=549755813887;GO LD;END;09141940
      IF N = "U1108"THEN BEGIN U1108~TRUE; IMAX:=2*35-1; GO LD END;   %F09141960
      IF N = "S360" THEN BEGIN S360 ~TRUE; IMAX:=2*31-1; GO LD END;   %F09141980
      IF N = "CDC"  THEN BEGIN S360 ~ <3>; IMAX:=2*23-1; GO LD END;   %F09141985
      IF N = "FREE" THEN BEGIN FREE := TRUE; IF BEGINEND = 0 THEN %     09141990
      RMARG := 66; GO LD; END; %                                        09141995
      GO L3;                                                            09142000
   EXIT:                                                                09143000
      STOPDEFINE ~ FALSE;                                               09144000
      END OF STEPIT;                                                    09145000
%  MAIN PROGRAM SECTION                                                 10000000
PROCEDURE PRINRC(N); VALUE      N; REAL N;                              10001000
      BEGIN RC R;                                                       10002000
      R ~ RCA[0,N];                                                     10003000
      WHILE R ! NIL DO BEGIN                                            10004000
      CARD ~ FORCARD(R);                                                10005000
      LINE ~ CARD(0,72) & 16* & CARD(72,8);                             10006000
         OUTPRO2; R ~ NEXT(R) END;                                      10007000
      END OF PRINRC;                                                    10008000
PROCEDURE COMMONLIST;                                                   10009000
      BEGIN SYMBOL P,S,ALIST,ILIST,RLIST;                             %P10010000
      SYMBOL BLIST;  REAL X; %                                        %U10010500
      INTEGER J;                                                      %P10011000
      PROCEDURE PRINLIST(T,L); VALUE T,L;                             %P10012000
      REAL T; SYMBOL L;                                               %P10013000
      BEGIN  BOOLEAN FT;                                              %P10014000
      LABEL L1,L2,L3,L4,L5; SWITCH SW ~ L1,L2,L3,L4;                  %P10015000
      SYMBOL P; INTEGER J; ALPHA W;                                   %P10016000
      FT ~ TRUE;                                                      %P10017000
      FOR P IN L DO BEGIN                                             %P10018000
      IF FT THEN BEGIN                                                %P10019000
      GO TO SW[T];                                                    %P10019010
         PRIN #LOGICAL #; GO L5; %                                    %U10019015
L1: PRIN #REAL #;             GO TO L5;                               %U10019020
   L2: PRIN #INTEGER #; GO L5;                                        %P10019030
   L3: PRIN #DIMENSION #; GO L5;                                      %P10019040
   L4: PRIN #COMMON/#COMNAME#/#; %                                      10019050
   L5: FT ~ FALSE END ELSE PRIN #, #;                                 %P10019060
      PRIN W ~ ALFOR(G~CDR P);                                        %P10019070
      IF T = 3 THEN BEGIN                                             %P10019080
      WHC ~ WH(G~CDR G); FST ~ TRUE;                                  %P10019090
      FOR J ~ 1 STEP 1 UNTIL WHC DO BEGIN                             %P10019100
      COMMA; PRIN CDRF(G~ATSM(1,G)); END;                             %P10019110
        PRIN #)# END;                                                 %P10019120
IF CON = (IF S360 OR U1108 OR B5500 THEN 19 ELSE 4) AND TAB GTR 50 THEN 10019130
         BEGIN TERPRIN; FT ~ TRUE END END;                            %P10019150
      IF NOT FT THEN TERPRIN;                                         %P10019160
      END OF PRINLIST;                                                %P10019170
      FOR P IN PLIST DO                                               %P10019190
      IF J ~ CLASSF(S~ CDR P) } BOOID AND                             %P10019210
         J { INTARRAYID THEN BEGIN                                    %P10019220
      IF X ~ (J - BOOID) MOD 3 = 0 THEN BLIST ~ P . BLIST ELSE %      %U10019230
       IF X=1 THEN RLIST ~ P . RLIST ELSE ILIST ~ P . ILIST; %        %U10019240
      IF J > INTID THEN ALIST ~ P . ALIST END;                        %U10019250
      RCX ~ 7; PRINLIST(0,BLIST);                                     %U10019260
      PRINLIST(1,RLIST);                                              %U10019270
      PRINLIST(2,ILIST);                                              %P10019280
      PRINLIST(3,ALIST);                                              %P10019290
      RCX ~ 4; PRINLIST(4,NCONC(BLIST,NCONC(RLIST,ILIST)));           %U10019300
      IF DATANDX ! 0 THEN BEGIN                                         10020000
      PRIN #REAL #COMNAME; TERPRIN; %                                   10020500
      PRIN #COMMON/#COMNAME#/#COMNAME#(#DATANDX#)#; %                   10021000
      TERPRIN END;                                                      10022000
IF FILENO GTR 0 THEN BEGIN %                                            10022300
PRIN #INTEGER #;                                                      %I10022405
FOR J := 1 STEP 1 UNTIL FILENO DO                                       10022410
      BEGIN PRIN #FILE#J; IF J NEQ FILENO THEN PRIN#,#; END; %          10022415
      TERPRIN; %                                                        10022420
      PRIN #COMMON/#COMNAME#/#; %                                       10022425
FOR J := 1 STEP 1 UNTIL FILENO DO                                       10022430
      BEGIN PRIN #FILE#J; IF J NEQ FILENO THEN PRIN#,#; END; %          10022435
      TERPRIN; %                                                        10022440
END; %                                                                  10022500
      IF B5500 THEN BEGIN PRIN #LOGICAL BOOL#; TERPRIN; END; %          10022600
      END OF COMMONLIST;                                                10023000
PROCEDURE WRAPUP;                                                       10024000
      BEGIN                                                             10025000
      RC RCT;                                                         %P10025500
      FORMAT OUT FM(X20,"FORTRAN OUTPUT",/);                          %P10026000
       SETSTN(0);                                                     %P10026500
%                                                                       10027000
      COMMONLIST;                                                       10028000
      LINE ~ SPACE; LINE(72,8) ~ NIL;                                   10029000
      IF FORTOG THEN LINE(84,1) ~ "~"; % 84-CHR BLOCKS ON FRTP       %BC10029500
      OUTPUT(OUTPRO2,LINE,120,6,72);                                  %P10030000
      WRITE(OUTFILE[PAGE]);                                             10031000
      WRITE(OUTFILE,FM);                                              %P10032000
      IF JCLTOG THEN BEGIN %                                          %U10032200
      LINE(0,6) ~ "}FOR,I"; PRINT #ST #PROGNAME;                     %BC10032400
      LINE(0,6) ~ SPACE; %                                           %BC10032500
      END; %                                                          %U10032600
      LINE(0,2) := "C-"; PRINT #MAIN # PROGNAME; LINE(0,2) := "  ";     10033000
      PRINRC(7);  %NOW ALL GLOBAL IN COMMON                           %P10034000
      PRINRC(4);  % COMMON LIST                                         10035000
      PRINRC(5);  % DATA LIST                                           10036000
      PRINRC(0);  % STMTS                                               10037000
      LINE(0,6) ~ SPACE;                                              %P10037500
      PRINT #STOP#,/ #END#;                                          %BC10038000
      RCX ~ 2; RCT ~ HEAD;                                              10039000
      WHILE RCT ! NIL DO BEGIN                                          10040000
      WRITE (OUTFILE[PAGE]); WRITE (OUTFILE,FM); %                    %U10041000
      IF JCLTOG THEN BEGIN %                                          %U10041100
      LINE(0,6) ~ "}FOR,I"; PRIN #ST # PROGNAME; TAB:=TAB-4;            10041200
                                      PRINT BLOCKF(RCT);             %BC10041250
      LINE(0,6) ~ SPACE; %                                           %BC10041300
 %                                                                   %BC10041340
 %                                                                   %BC10041360
      END; %                                                          %U10041400
      LINE(0,2) := "C-"; PRINT #BLOCK #,BLOCKF(RCT); %                  10042000
      LINE(0,2) := "  "; PRINRC(2); PRINRC(7); PRINRC(4); %             10043000
      RCA[0,1] ~ DECLF(RCT);                                            10044000
      RCA[0,0] ~ STMTF(RCT);                                            10045000
      RCA[0,2] ~                                                      %P10045500
      RCT ~ NEXTSUBR(RCT);                                              10046000
      PRINRC(1); PRINRC(0);                                             10047000
      LINE(0,6) ~ SPACE;                                              %P10047500
      PRINT #RETURN#,/#END#;                                            10048000
      END;                                                              10049000
      WRITE(OUTFILE[PAGE]); WRITE(OUTFILE,FM); %                        10050000
      IF JCLTOG THEN BEGIN %                                         %BC10050040
      LINE(0,6) ~ "}FOR,I"; PRIN #ST # PROGNAME; TAB:=TAB-4;            10050050
                                      PRINT NEWBLOCK+1; %            %BC10050060
      LINE(0,6) ~ SPACE; %                                           %BC10050070
      END; %                                                         %BC10050080
      LINE(0,2) := "C-"; PRINT #AUXIL#,PROGNAME; LINE(0,2) := "  ";     10050095
      PRINT #REAL FUNCTION REALFN(B)#,/#LOGICAL B#; %                   10050100
      PRINT #LOGICAL BOOLEA#; %                                         10050200
      PRINT #EQUIVALENCE(BOOLEA,REALLY)#; %                             10050400
      PRINT #BOOLEA = B#,/#REALFN = REALLY#,/#RETURN#,/#END#; %         10050500
      IF B5500 THEN BEGIN %                                             10050600
      PRINT #LOGICAL FUNCTION BOOL(R)#; %                               10050700
      PRINT #LOGICAL BOOLEA#; %                                         10050800
      PRINT #EQUIVALENCE(BOOLEA,REALLY)#; %                             10051000
      PRINT #REALLY = R#,/#BOOL = BOOLEA#,/#RETURN#,/#END#; %           10051100
      END; %                                                            10051200
      PUNCHTOG ~ FORTOG ~ FALSE; %                                    %U10052000
      LOCK(PUNCH,*); %                                                  10052900
      WRITE(OUTFILE[PAGE]); WRITE(OUTFILE,FM); %                      %U10053000
      NTS(*,5); %                                                       10054000
      TIMER;                                                            10055000
      PRINT#NUMBER OF ERRORS = #, ERRORCOUNT;                           10056000
      PRINT #MAXIMUM LISP STORAGE USED = # LMAX # WORDS#;             %P10056100
      PRINT #END OF TRANSLATION#;                                       10057000
      END OF WRAPUP;                                                    10058000
PROCEDURE PROGRAM;                                                      10059000
      BEGIN                                                           %P10059500
      FORMAT OUT FM(X16,"RECC B5700 ALGOL TO",                          10059600
          " FORTRAN TRANSLATOR",/);                                     10059700
      INTEGER N,STNL; %                                               %U10059750
      LABEL L; WRITE(OUTFILE,FM);                                     %P10059800
      IF ESPDISK NEQ 0 THEN WRITE(REMOTE,FM); %                         10059850
      NTS(*,11); %                                                      10059900
      PROGNAME ~ "MAINXX"; %                                          %U10060000
      IMAX := REAL(<377777777777>); % 2*35-1                         %BC10060050
      COMNAME := "COMBLK"; %                                            10060500
      ONE ~ MKCONST(1,1);                                               10061000
      ZERO ~ MKCONST(0,1);                                              10062000
      TBLR ~ ".TRUE."; TRUTH ~ MKP(0,0,NDX); %                        %U10062100
      TBLR ~ ".FALSE."; FALSIE ~ MKP(0,0,NDX); %                      %U10062200
      ALLOWDOSTMT ~ %                                                 %U10062800
      LISTOG ~ TRUE;                                                    10063000
      IF ESPDISK NEQ 0 THEN BEGIN %                                     10063100
      INFILE.TYPE := 12; %                                              10063200
      IF NOT 10 NEQ PUNCH.TYPE NEQ 13 THEN PUNCH.TYPE := 12; %          10063300
      END ELSE BEGIN %                                                  10063500
      IF NOT 10 NEQ PUNCH.TYPE NEQ 13 THEN PUNCH.TYPE := 12; %          10063600
      END; %                                                            10063900
%                                                                       10064000
      RCX ~ 1;                                                        %P10064100
      LINE ~ SPACE     ;                                              %P10064500
       OUTPUT(OUTPRO,CRD,80,6,72); CRD ~ SPACE;                       %P10065000
      INPUT(INPRO,CARD,80,0,72,/FALSE);                                 10066000
      BLOCK := NEWBLOCK := 1; %                                         10066900
      DO STEPIT UNTIL SYM = "BEGIN" OR EOFTOG;                        %P10067000
      BEGINEND := 1; %                                                  10067500
      STEPIT;                                                           10068000
      DECLARE;                                                          10069000
   L: COMPOUNDTAIL;                                                   %P10070000
      IF SYM ! "." AND NOT EOFTOG THEN GO L;                          %P10070100
      IF FILENO ! 0 THEN BEGIN %                                      %U10071000
SETSTN(0); RCX:= 5;                                                   %U10071100
FOR N:=1 STEP 1 UNTIL FILENO DO       BEGIN                           %I10071200
PRIN #FILE# N # = # UNITC[N];                                         %I10071300
TERPRIN;   END;                                                       %I10071400
%                                                                       10071450
      END; %                                                          %U10071500
      WRAPUP;                                                         %P10072000
      IF NEWTAPETOG THEN BEGIN                                        %P10072100
      CARD(72,8) ~ [2: "9999"];                                       %P10072200
        WRITE(NEWTAPE,10,CARD) END;                                   %P10072300
      END OF PROGRAM;                                                   10073000
%  HERE COMES THE TRANSLATOR                                            11000000
      PROGRAM;                                                          11001000
END.                                                                    11002000
END;END.        LAST CARD ON 0CRDING TAPE                               99999999
